include "types.fbs";

namespace ppl.nn.pmx;

file_identifier "OPMX";

table Edge {
    name: string;
}

table NodeType {
    domain: string;
    name: string;
    version: uint32;
}

table Node {
    name: string;
    type: NodeType;
    inputs: [uint32];
    outputs: [uint32];
    extra_inputs: [uint32];
}

table GraphTopo {
    name: string;
    edges: [Edge];
    nodes: [Node];
    constants: [uint32];
    inputs: [uint32];
    outputs: [uint32];
    extra_inputs: [uint32];
}

table NodeInfo {
    node_id: uint32;
    data: [ubyte];
}

enum ConstantFlag : uint32 {
    EXTERNAL_MULTI_FILES = 0x1,
    EXTERNAL_ONE_FILE = 0x10,
}

table Constant {
    edge_id: uint32;
    flags: uint32; // or-ed flags
    // if EXTERNAL_MULTI_FILES is set
    //   - `data_offset` == UINT64_MAX: use the defalut gen name function to get the file name,
    //                                  `data_bytes` is the size of data
    //   - `data_offset` < UINT64_MAX: file name is stored in GraphData::shared_data + `data_offset`,
    //                                 `data_bytes` is the length of file name
    data_offset: uint64;
    data_bytes: uint64;
}

table Shape {
    edge_id: uint32;
    data_type: DataType;
    data_format: DataFormat;
    dims: [int64];
}

table Partition {
    engine_id: uint32;
    nodes: [NodeInfo];
    constants: [Constant];
}

table GraphData {
    shapes: [Shape];
    partitions: [Partition];
    shared_data: [ubyte];
}

table Graph {
    topo: GraphTopo;
    data: GraphData;
}

table Engine {
    name: string;
    data: [ubyte];
}

table Model {
    version: uint32;
    engines: [Engine];
    graph: Graph;
    producer: string;
}

root_type Model;
