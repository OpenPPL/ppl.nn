// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "onnx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace onnx {

void protobuf_ShutdownFile_onnx_2eproto() {
  AttributeProto_default_instance_.Shutdown();
  ValueInfoProto_default_instance_.Shutdown();
  NodeProto_default_instance_.Shutdown();
  TrainingInfoProto_default_instance_.Shutdown();
  ModelProto_default_instance_.Shutdown();
  StringStringEntryProto_default_instance_.Shutdown();
  TensorAnnotation_default_instance_.Shutdown();
  GraphProto_default_instance_.Shutdown();
  TensorProto_default_instance_.Shutdown();
  TensorProto_Segment_default_instance_.Shutdown();
  SparseTensorProto_default_instance_.Shutdown();
  TensorShapeProto_default_instance_.Shutdown();
  TensorShapeProto_Dimension_default_instance_.Shutdown();
  TypeProto_default_instance_.Shutdown();
  TypeProto_Tensor_default_instance_.Shutdown();
  TypeProto_Sequence_default_instance_.Shutdown();
  TypeProto_Map_default_instance_.Shutdown();
  TypeProto_Optional_default_instance_.Shutdown();
  TypeProto_SparseTensor_default_instance_.Shutdown();
  OperatorSetIdProto_default_instance_.Shutdown();
  FunctionProto_default_instance_.Shutdown();
}

void protobuf_InitDefaults_onnx_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  AttributeProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ValueInfoProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NodeProto_default_instance_.DefaultConstruct();
  TrainingInfoProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ModelProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StringStringEntryProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TensorAnnotation_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GraphProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TensorProto_default_instance_.DefaultConstruct();
  TensorProto_Segment_default_instance_.DefaultConstruct();
  SparseTensorProto_default_instance_.DefaultConstruct();
  TensorShapeProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TensorShapeProto_Dimension_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TypeProto_default_instance_.DefaultConstruct();
  TypeProto_Tensor_default_instance_.DefaultConstruct();
  TypeProto_Sequence_default_instance_.DefaultConstruct();
  TypeProto_Map_default_instance_.DefaultConstruct();
  TypeProto_Optional_default_instance_.DefaultConstruct();
  TypeProto_SparseTensor_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OperatorSetIdProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FunctionProto_default_instance_.DefaultConstruct();
  AttributeProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  ValueInfoProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  TrainingInfoProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  ModelProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  StringStringEntryProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  TensorAnnotation_default_instance_.get_mutable()->InitAsDefaultInstance();
  GraphProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  TensorProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  TensorProto_Segment_default_instance_.get_mutable()->InitAsDefaultInstance();
  SparseTensorProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  TensorShapeProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  TensorShapeProto_Dimension_default_instance_.get_mutable()->InitAsDefaultInstance();
  TypeProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  TypeProto_Tensor_default_instance_.get_mutable()->InitAsDefaultInstance();
  TypeProto_Sequence_default_instance_.get_mutable()->InitAsDefaultInstance();
  TypeProto_Map_default_instance_.get_mutable()->InitAsDefaultInstance();
  TypeProto_Optional_default_instance_.get_mutable()->InitAsDefaultInstance();
  TypeProto_SparseTensor_default_instance_.get_mutable()->InitAsDefaultInstance();
  OperatorSetIdProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  FunctionProto_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_onnx_2eproto_once_);
void protobuf_InitDefaults_onnx_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_onnx_2eproto_once_,
                 &protobuf_InitDefaults_onnx_2eproto_impl);
}
void protobuf_AddDesc_onnx_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_onnx_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_onnx_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_onnx_2eproto_once_);
void protobuf_AddDesc_onnx_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_onnx_2eproto_once_,
                 &protobuf_AddDesc_onnx_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_onnx_2eproto {
  StaticDescriptorInitializer_onnx_2eproto() {
    protobuf_AddDesc_onnx_2eproto();
  }
} static_descriptor_initializer_onnx_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
bool Version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

bool OperatorStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

bool AttributeProto_AttributeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AttributeProto_AttributeType AttributeProto::UNDEFINED;
const AttributeProto_AttributeType AttributeProto::FLOAT;
const AttributeProto_AttributeType AttributeProto::INT;
const AttributeProto_AttributeType AttributeProto::STRING;
const AttributeProto_AttributeType AttributeProto::TENSOR;
const AttributeProto_AttributeType AttributeProto::GRAPH;
const AttributeProto_AttributeType AttributeProto::SPARSE_TENSOR;
const AttributeProto_AttributeType AttributeProto::TYPE_PROTO;
const AttributeProto_AttributeType AttributeProto::FLOATS;
const AttributeProto_AttributeType AttributeProto::INTS;
const AttributeProto_AttributeType AttributeProto::STRINGS;
const AttributeProto_AttributeType AttributeProto::TENSORS;
const AttributeProto_AttributeType AttributeProto::GRAPHS;
const AttributeProto_AttributeType AttributeProto::SPARSE_TENSORS;
const AttributeProto_AttributeType AttributeProto::TYPE_PROTOS;
const AttributeProto_AttributeType AttributeProto::AttributeType_MIN;
const AttributeProto_AttributeType AttributeProto::AttributeType_MAX;
const int AttributeProto::AttributeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttributeProto::kNameFieldNumber;
const int AttributeProto::kRefAttrNameFieldNumber;
const int AttributeProto::kDocStringFieldNumber;
const int AttributeProto::kTypeFieldNumber;
const int AttributeProto::kFFieldNumber;
const int AttributeProto::kIFieldNumber;
const int AttributeProto::kSFieldNumber;
const int AttributeProto::kTFieldNumber;
const int AttributeProto::kGFieldNumber;
const int AttributeProto::kSparseTensorFieldNumber;
const int AttributeProto::kTpFieldNumber;
const int AttributeProto::kFloatsFieldNumber;
const int AttributeProto::kIntsFieldNumber;
const int AttributeProto::kStringsFieldNumber;
const int AttributeProto::kTensorsFieldNumber;
const int AttributeProto::kGraphsFieldNumber;
const int AttributeProto::kSparseTensorsFieldNumber;
const int AttributeProto::kTypeProtosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttributeProto::AttributeProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.AttributeProto)
}

void AttributeProto::InitAsDefaultInstance() {
  t_ = const_cast< ::onnx::TensorProto*>(
      ::onnx::TensorProto::internal_default_instance());
  g_ = const_cast< ::onnx::GraphProto*>(
      ::onnx::GraphProto::internal_default_instance());
  sparse_tensor_ = const_cast< ::onnx::SparseTensorProto*>(
      ::onnx::SparseTensorProto::internal_default_instance());
  tp_ = const_cast< ::onnx::TypeProto*>(
      ::onnx::TypeProto::internal_default_instance());
}

AttributeProto::AttributeProto(const AttributeProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.AttributeProto)
}

void AttributeProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_attr_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  t_ = NULL;
  g_ = NULL;
  sparse_tensor_ = NULL;
  tp_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&i_) -
    reinterpret_cast<char*>(&type_) + sizeof(i_));
  _cached_size_ = 0;
}

AttributeProto::~AttributeProto() {
  // @@protoc_insertion_point(destructor:onnx.AttributeProto)
  SharedDtor();
}

void AttributeProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_attr_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &AttributeProto_default_instance_.get()) {
    delete t_;
    delete g_;
    delete sparse_tensor_;
    delete tp_;
  }
}

void AttributeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AttributeProto& AttributeProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AttributeProto> AttributeProto_default_instance_;

AttributeProto* AttributeProto::New(::google::protobuf::Arena* arena) const {
  AttributeProto* n = new AttributeProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttributeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.AttributeProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AttributeProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AttributeProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, i_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_attr_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && t_ != NULL) delete t_;
  t_ = NULL;
  if (GetArenaNoVirtual() == NULL && g_ != NULL) delete g_;
  g_ = NULL;
  if (GetArenaNoVirtual() == NULL && sparse_tensor_ != NULL) delete sparse_tensor_;
  sparse_tensor_ = NULL;
  if (GetArenaNoVirtual() == NULL && tp_ != NULL) delete tp_;
  tp_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  floats_.Clear();
  ints_.Clear();
  strings_.Clear();
  tensors_.Clear();
  graphs_.Clear();
  sparse_tensors_.Clear();
  type_protos_.Clear();
}

bool AttributeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.AttributeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.AttributeProto.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_f;
        break;
      }

      // optional float f = 2;
      case 2: {
        if (tag == 21) {
         parse_f:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_i;
        break;
      }

      // optional int64 i = 3;
      case 3: {
        if (tag == 24) {
         parse_i:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_s;
        break;
      }

      // optional bytes s = 4;
      case 4: {
        if (tag == 34) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_t;
        break;
      }

      // optional .onnx.TensorProto t = 5;
      case 5: {
        if (tag == 42) {
         parse_t:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_g;
        break;
      }

      // optional .onnx.GraphProto g = 6;
      case 6: {
        if (tag == 50) {
         parse_g:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_g()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_floats;
        break;
      }

      // repeated float floats = 7;
      case 7: {
        if (tag == 58) {
         parse_floats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_floats())));
        } else if (tag == 61) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58, input, this->mutable_floats())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ints;
        break;
      }

      // repeated int64 ints = 8;
      case 8: {
        if (tag == 66) {
         parse_ints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ints())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 66, input, this->mutable_ints())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_strings;
        break;
      }

      // repeated bytes strings = 9;
      case 9: {
        if (tag == 74) {
         parse_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_strings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_strings;
        if (input->ExpectTag(82)) goto parse_tensors;
        break;
      }

      // repeated .onnx.TensorProto tensors = 10;
      case 10: {
        if (tag == 82) {
         parse_tensors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tensors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_tensors;
        if (input->ExpectTag(90)) goto parse_loop_graphs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.GraphProto graphs = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_graphs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_graphs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_graphs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(106)) goto parse_doc_string;
        break;
      }

      // optional string doc_string = 13;
      case 13: {
        if (tag == 106) {
         parse_doc_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->doc_string().data(), this->doc_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.AttributeProto.doc_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_tp;
        break;
      }

      // optional .onnx.TypeProto tp = 14;
      case 14: {
        if (tag == 114) {
         parse_tp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_type_protos;
        break;
      }

      // repeated .onnx.TypeProto type_protos = 15;
      case 15: {
        if (tag == 122) {
         parse_type_protos:
          DO_(input->IncrementRecursionDepth());
         parse_loop_type_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_type_protos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_type_protos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(160)) goto parse_type;
        break;
      }

      // optional .onnx.AttributeProto.AttributeType type = 20;
      case 20: {
        if (tag == 160) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::onnx::AttributeProto_AttributeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_ref_attr_name;
        break;
      }

      // optional string ref_attr_name = 21;
      case 21: {
        if (tag == 170) {
         parse_ref_attr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref_attr_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ref_attr_name().data(), this->ref_attr_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.AttributeProto.ref_attr_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_sparse_tensor;
        break;
      }

      // optional .onnx.SparseTensorProto sparse_tensor = 22;
      case 22: {
        if (tag == 178) {
         parse_sparse_tensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sparse_tensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_sparse_tensors;
        break;
      }

      // repeated .onnx.SparseTensorProto sparse_tensors = 23;
      case 23: {
        if (tag == 186) {
         parse_sparse_tensors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sparse_tensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sparse_tensors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_loop_sparse_tensors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.AttributeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.AttributeProto)
  return false;
#undef DO_
}

void AttributeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.AttributeProto)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.AttributeProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float f = 2;
  if (this->f() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->f(), output);
  }

  // optional int64 i = 3;
  if (this->i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->i(), output);
  }

  // optional bytes s = 4;
  if (this->s().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->s(), output);
  }

  // optional .onnx.TensorProto t = 5;
  if (this->has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->t_, output);
  }

  // optional .onnx.GraphProto g = 6;
  if (this->has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->g_, output);
  }

  // repeated float floats = 7;
  if (this->floats_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_floats_cached_byte_size_);
  }
  for (int i = 0; i < this->floats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->floats(i), output);
  }

  // repeated int64 ints = 8;
  if (this->ints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ints_cached_byte_size_);
  }
  for (int i = 0; i < this->ints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->ints(i), output);
  }

  // repeated bytes strings = 9;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->strings(i), output);
  }

  // repeated .onnx.TensorProto tensors = 10;
  for (unsigned int i = 0, n = this->tensors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->tensors(i), output);
  }

  // repeated .onnx.GraphProto graphs = 11;
  for (unsigned int i = 0, n = this->graphs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->graphs(i), output);
  }

  // optional string doc_string = 13;
  if (this->doc_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->doc_string().data(), this->doc_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.AttributeProto.doc_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->doc_string(), output);
  }

  // optional .onnx.TypeProto tp = 14;
  if (this->has_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->tp_, output);
  }

  // repeated .onnx.TypeProto type_protos = 15;
  for (unsigned int i = 0, n = this->type_protos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->type_protos(i), output);
  }

  // optional .onnx.AttributeProto.AttributeType type = 20;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->type(), output);
  }

  // optional string ref_attr_name = 21;
  if (this->ref_attr_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ref_attr_name().data(), this->ref_attr_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.AttributeProto.ref_attr_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->ref_attr_name(), output);
  }

  // optional .onnx.SparseTensorProto sparse_tensor = 22;
  if (this->has_sparse_tensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, *this->sparse_tensor_, output);
  }

  // repeated .onnx.SparseTensorProto sparse_tensors = 23;
  for (unsigned int i = 0, n = this->sparse_tensors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->sparse_tensors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.AttributeProto)
}

size_t AttributeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.AttributeProto)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string ref_attr_name = 21;
  if (this->ref_attr_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ref_attr_name());
  }

  // optional string doc_string = 13;
  if (this->doc_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_string());
  }

  // optional .onnx.AttributeProto.AttributeType type = 20;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional float f = 2;
  if (this->f() != 0) {
    total_size += 1 + 4;
  }

  // optional int64 i = 3;
  if (this->i() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->i());
  }

  // optional bytes s = 4;
  if (this->s().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->s());
  }

  // optional .onnx.TensorProto t = 5;
  if (this->has_t()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->t_);
  }

  // optional .onnx.GraphProto g = 6;
  if (this->has_g()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->g_);
  }

  // optional .onnx.SparseTensorProto sparse_tensor = 22;
  if (this->has_sparse_tensor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sparse_tensor_);
  }

  // optional .onnx.TypeProto tp = 14;
  if (this->has_tp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tp_);
  }

  // repeated float floats = 7;
  {
    size_t data_size = 0;
    unsigned int count = this->floats_size();
    data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _floats_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 ints = 8;
  {
    size_t data_size = 0;
    unsigned int count = this->ints_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ints(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ints_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes strings = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strings_size());
  for (int i = 0; i < this->strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->strings(i));
  }

  // repeated .onnx.TensorProto tensors = 10;
  {
    unsigned int count = this->tensors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tensors(i));
    }
  }

  // repeated .onnx.GraphProto graphs = 11;
  {
    unsigned int count = this->graphs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->graphs(i));
    }
  }

  // repeated .onnx.SparseTensorProto sparse_tensors = 23;
  {
    unsigned int count = this->sparse_tensors_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sparse_tensors(i));
    }
  }

  // repeated .onnx.TypeProto type_protos = 15;
  {
    unsigned int count = this->type_protos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_protos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributeProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AttributeProto*>(&from));
}

void AttributeProto::MergeFrom(const AttributeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.AttributeProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AttributeProto::UnsafeMergeFrom(const AttributeProto& from) {
  GOOGLE_DCHECK(&from != this);
  floats_.UnsafeMergeFrom(from.floats_);
  ints_.UnsafeMergeFrom(from.ints_);
  strings_.UnsafeMergeFrom(from.strings_);
  tensors_.MergeFrom(from.tensors_);
  graphs_.MergeFrom(from.graphs_);
  sparse_tensors_.MergeFrom(from.sparse_tensors_);
  type_protos_.MergeFrom(from.type_protos_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ref_attr_name().size() > 0) {

    ref_attr_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_attr_name_);
  }
  if (from.doc_string().size() > 0) {

    doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.f() != 0) {
    set_f(from.f());
  }
  if (from.i() != 0) {
    set_i(from.i());
  }
  if (from.s().size() > 0) {

    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  if (from.has_t()) {
    mutable_t()->::onnx::TensorProto::MergeFrom(from.t());
  }
  if (from.has_g()) {
    mutable_g()->::onnx::GraphProto::MergeFrom(from.g());
  }
  if (from.has_sparse_tensor()) {
    mutable_sparse_tensor()->::onnx::SparseTensorProto::MergeFrom(from.sparse_tensor());
  }
  if (from.has_tp()) {
    mutable_tp()->::onnx::TypeProto::MergeFrom(from.tp());
  }
}

void AttributeProto::CopyFrom(const AttributeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.AttributeProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AttributeProto::IsInitialized() const {

  return true;
}

void AttributeProto::Swap(AttributeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttributeProto::InternalSwap(AttributeProto* other) {
  name_.Swap(&other->name_);
  ref_attr_name_.Swap(&other->ref_attr_name_);
  doc_string_.Swap(&other->doc_string_);
  std::swap(type_, other->type_);
  std::swap(f_, other->f_);
  std::swap(i_, other->i_);
  s_.Swap(&other->s_);
  std::swap(t_, other->t_);
  std::swap(g_, other->g_);
  std::swap(sparse_tensor_, other->sparse_tensor_);
  std::swap(tp_, other->tp_);
  floats_.UnsafeArenaSwap(&other->floats_);
  ints_.UnsafeArenaSwap(&other->ints_);
  strings_.UnsafeArenaSwap(&other->strings_);
  tensors_.UnsafeArenaSwap(&other->tensors_);
  graphs_.UnsafeArenaSwap(&other->graphs_);
  sparse_tensors_.UnsafeArenaSwap(&other->sparse_tensors_);
  type_protos_.UnsafeArenaSwap(&other->type_protos_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AttributeProto::GetTypeName() const {
  return "onnx.AttributeProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AttributeProto

// optional string name = 1;
void AttributeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AttributeProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttributeProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.name)
}
void AttributeProto::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.name)
}
void AttributeProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.name)
}
::std::string* AttributeProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AttributeProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttributeProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.name)
}

// optional string ref_attr_name = 21;
void AttributeProto::clear_ref_attr_name() {
  ref_attr_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AttributeProto::ref_attr_name() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.ref_attr_name)
  return ref_attr_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttributeProto::set_ref_attr_name(const ::std::string& value) {
  
  ref_attr_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.ref_attr_name)
}
void AttributeProto::set_ref_attr_name(const char* value) {
  
  ref_attr_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.ref_attr_name)
}
void AttributeProto::set_ref_attr_name(const char* value, size_t size) {
  
  ref_attr_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.ref_attr_name)
}
::std::string* AttributeProto::mutable_ref_attr_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.ref_attr_name)
  return ref_attr_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AttributeProto::release_ref_attr_name() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.ref_attr_name)
  
  return ref_attr_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttributeProto::set_allocated_ref_attr_name(::std::string* ref_attr_name) {
  if (ref_attr_name != NULL) {
    
  } else {
    
  }
  ref_attr_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref_attr_name);
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.ref_attr_name)
}

// optional string doc_string = 13;
void AttributeProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AttributeProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.doc_string)
  return doc_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttributeProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.doc_string)
}
void AttributeProto::set_doc_string(const char* value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.doc_string)
}
void AttributeProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.doc_string)
}
::std::string* AttributeProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AttributeProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttributeProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.doc_string)
}

// optional .onnx.AttributeProto.AttributeType type = 20;
void AttributeProto::clear_type() {
  type_ = 0;
}
::onnx::AttributeProto_AttributeType AttributeProto::type() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.type)
  return static_cast< ::onnx::AttributeProto_AttributeType >(type_);
}
void AttributeProto::set_type(::onnx::AttributeProto_AttributeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.type)
}

// optional float f = 2;
void AttributeProto::clear_f() {
  f_ = 0;
}
float AttributeProto::f() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.f)
  return f_;
}
void AttributeProto::set_f(float value) {
  
  f_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.f)
}

// optional int64 i = 3;
void AttributeProto::clear_i() {
  i_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AttributeProto::i() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.i)
  return i_;
}
void AttributeProto::set_i(::google::protobuf::int64 value) {
  
  i_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.i)
}

// optional bytes s = 4;
void AttributeProto::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AttributeProto::s() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.s)
  return s_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttributeProto::set_s(const ::std::string& value) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.s)
}
void AttributeProto::set_s(const char* value) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.s)
}
void AttributeProto::set_s(const void* value, size_t size) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.s)
}
::std::string* AttributeProto::mutable_s() {
  
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.s)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AttributeProto::release_s() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.s)
  
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttributeProto::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.s)
}

// optional .onnx.TensorProto t = 5;
bool AttributeProto::has_t() const {
  return this != internal_default_instance() && t_ != NULL;
}
void AttributeProto::clear_t() {
  if (GetArenaNoVirtual() == NULL && t_ != NULL) delete t_;
  t_ = NULL;
}
const ::onnx::TensorProto& AttributeProto::t() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.t)
  return t_ != NULL ? *t_
                         : *::onnx::TensorProto::internal_default_instance();
}
::onnx::TensorProto* AttributeProto::mutable_t() {
  
  if (t_ == NULL) {
    t_ = new ::onnx::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.t)
  return t_;
}
::onnx::TensorProto* AttributeProto::release_t() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.t)
  
  ::onnx::TensorProto* temp = t_;
  t_ = NULL;
  return temp;
}
void AttributeProto::set_allocated_t(::onnx::TensorProto* t) {
  delete t_;
  t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.t)
}

// optional .onnx.GraphProto g = 6;
bool AttributeProto::has_g() const {
  return this != internal_default_instance() && g_ != NULL;
}
void AttributeProto::clear_g() {
  if (GetArenaNoVirtual() == NULL && g_ != NULL) delete g_;
  g_ = NULL;
}
const ::onnx::GraphProto& AttributeProto::g() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.g)
  return g_ != NULL ? *g_
                         : *::onnx::GraphProto::internal_default_instance();
}
::onnx::GraphProto* AttributeProto::mutable_g() {
  
  if (g_ == NULL) {
    g_ = new ::onnx::GraphProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.g)
  return g_;
}
::onnx::GraphProto* AttributeProto::release_g() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.g)
  
  ::onnx::GraphProto* temp = g_;
  g_ = NULL;
  return temp;
}
void AttributeProto::set_allocated_g(::onnx::GraphProto* g) {
  delete g_;
  g_ = g;
  if (g) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.g)
}

// optional .onnx.SparseTensorProto sparse_tensor = 22;
bool AttributeProto::has_sparse_tensor() const {
  return this != internal_default_instance() && sparse_tensor_ != NULL;
}
void AttributeProto::clear_sparse_tensor() {
  if (GetArenaNoVirtual() == NULL && sparse_tensor_ != NULL) delete sparse_tensor_;
  sparse_tensor_ = NULL;
}
const ::onnx::SparseTensorProto& AttributeProto::sparse_tensor() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.sparse_tensor)
  return sparse_tensor_ != NULL ? *sparse_tensor_
                         : *::onnx::SparseTensorProto::internal_default_instance();
}
::onnx::SparseTensorProto* AttributeProto::mutable_sparse_tensor() {
  
  if (sparse_tensor_ == NULL) {
    sparse_tensor_ = new ::onnx::SparseTensorProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.sparse_tensor)
  return sparse_tensor_;
}
::onnx::SparseTensorProto* AttributeProto::release_sparse_tensor() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.sparse_tensor)
  
  ::onnx::SparseTensorProto* temp = sparse_tensor_;
  sparse_tensor_ = NULL;
  return temp;
}
void AttributeProto::set_allocated_sparse_tensor(::onnx::SparseTensorProto* sparse_tensor) {
  delete sparse_tensor_;
  sparse_tensor_ = sparse_tensor;
  if (sparse_tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.sparse_tensor)
}

// optional .onnx.TypeProto tp = 14;
bool AttributeProto::has_tp() const {
  return this != internal_default_instance() && tp_ != NULL;
}
void AttributeProto::clear_tp() {
  if (GetArenaNoVirtual() == NULL && tp_ != NULL) delete tp_;
  tp_ = NULL;
}
const ::onnx::TypeProto& AttributeProto::tp() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.tp)
  return tp_ != NULL ? *tp_
                         : *::onnx::TypeProto::internal_default_instance();
}
::onnx::TypeProto* AttributeProto::mutable_tp() {
  
  if (tp_ == NULL) {
    tp_ = new ::onnx::TypeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.tp)
  return tp_;
}
::onnx::TypeProto* AttributeProto::release_tp() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.tp)
  
  ::onnx::TypeProto* temp = tp_;
  tp_ = NULL;
  return temp;
}
void AttributeProto::set_allocated_tp(::onnx::TypeProto* tp) {
  delete tp_;
  tp_ = tp;
  if (tp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.tp)
}

// repeated float floats = 7;
int AttributeProto::floats_size() const {
  return floats_.size();
}
void AttributeProto::clear_floats() {
  floats_.Clear();
}
float AttributeProto::floats(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.floats)
  return floats_.Get(index);
}
void AttributeProto::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.floats)
}
void AttributeProto::add_floats(float value) {
  floats_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.floats)
}
const ::google::protobuf::RepeatedField< float >&
AttributeProto::floats() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.floats)
  return floats_;
}
::google::protobuf::RepeatedField< float >*
AttributeProto::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.floats)
  return &floats_;
}

// repeated int64 ints = 8;
int AttributeProto::ints_size() const {
  return ints_.size();
}
void AttributeProto::clear_ints() {
  ints_.Clear();
}
::google::protobuf::int64 AttributeProto::ints(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.ints)
  return ints_.Get(index);
}
void AttributeProto::set_ints(int index, ::google::protobuf::int64 value) {
  ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.ints)
}
void AttributeProto::add_ints(::google::protobuf::int64 value) {
  ints_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.ints)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AttributeProto::ints() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.ints)
  return ints_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AttributeProto::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.ints)
  return &ints_;
}

// repeated bytes strings = 9;
int AttributeProto::strings_size() const {
  return strings_.size();
}
void AttributeProto::clear_strings() {
  strings_.Clear();
}
const ::std::string& AttributeProto::strings(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.strings)
  return strings_.Get(index);
}
::std::string* AttributeProto::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.strings)
  return strings_.Mutable(index);
}
void AttributeProto::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.strings)
  strings_.Mutable(index)->assign(value);
}
void AttributeProto::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.strings)
}
void AttributeProto::set_strings(int index, const void* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.strings)
}
::std::string* AttributeProto::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:onnx.AttributeProto.strings)
  return strings_.Add();
}
void AttributeProto::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.strings)
}
void AttributeProto::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.AttributeProto.strings)
}
void AttributeProto::add_strings(const void* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.AttributeProto.strings)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AttributeProto::strings() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.strings)
  return strings_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AttributeProto::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.strings)
  return &strings_;
}

// repeated .onnx.TensorProto tensors = 10;
int AttributeProto::tensors_size() const {
  return tensors_.size();
}
void AttributeProto::clear_tensors() {
  tensors_.Clear();
}
const ::onnx::TensorProto& AttributeProto::tensors(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.tensors)
  return tensors_.Get(index);
}
::onnx::TensorProto* AttributeProto::mutable_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.tensors)
  return tensors_.Mutable(index);
}
::onnx::TensorProto* AttributeProto::add_tensors() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.tensors)
  return tensors_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
AttributeProto::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.tensors)
  return &tensors_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
AttributeProto::tensors() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.tensors)
  return tensors_;
}

// repeated .onnx.GraphProto graphs = 11;
int AttributeProto::graphs_size() const {
  return graphs_.size();
}
void AttributeProto::clear_graphs() {
  graphs_.Clear();
}
const ::onnx::GraphProto& AttributeProto::graphs(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.graphs)
  return graphs_.Get(index);
}
::onnx::GraphProto* AttributeProto::mutable_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.graphs)
  return graphs_.Mutable(index);
}
::onnx::GraphProto* AttributeProto::add_graphs() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.graphs)
  return graphs_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >*
AttributeProto::mutable_graphs() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.graphs)
  return &graphs_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >&
AttributeProto::graphs() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.graphs)
  return graphs_;
}

// repeated .onnx.SparseTensorProto sparse_tensors = 23;
int AttributeProto::sparse_tensors_size() const {
  return sparse_tensors_.size();
}
void AttributeProto::clear_sparse_tensors() {
  sparse_tensors_.Clear();
}
const ::onnx::SparseTensorProto& AttributeProto::sparse_tensors(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.sparse_tensors)
  return sparse_tensors_.Get(index);
}
::onnx::SparseTensorProto* AttributeProto::mutable_sparse_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.sparse_tensors)
  return sparse_tensors_.Mutable(index);
}
::onnx::SparseTensorProto* AttributeProto::add_sparse_tensors() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.sparse_tensors)
  return sparse_tensors_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >*
AttributeProto::mutable_sparse_tensors() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.sparse_tensors)
  return &sparse_tensors_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >&
AttributeProto::sparse_tensors() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.sparse_tensors)
  return sparse_tensors_;
}

// repeated .onnx.TypeProto type_protos = 15;
int AttributeProto::type_protos_size() const {
  return type_protos_.size();
}
void AttributeProto::clear_type_protos() {
  type_protos_.Clear();
}
const ::onnx::TypeProto& AttributeProto::type_protos(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.type_protos)
  return type_protos_.Get(index);
}
::onnx::TypeProto* AttributeProto::mutable_type_protos(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.type_protos)
  return type_protos_.Mutable(index);
}
::onnx::TypeProto* AttributeProto::add_type_protos() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.type_protos)
  return type_protos_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::TypeProto >*
AttributeProto::mutable_type_protos() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.type_protos)
  return &type_protos_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::TypeProto >&
AttributeProto::type_protos() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.type_protos)
  return type_protos_;
}

inline const AttributeProto* AttributeProto::internal_default_instance() {
  return &AttributeProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueInfoProto::kNameFieldNumber;
const int ValueInfoProto::kTypeFieldNumber;
const int ValueInfoProto::kDocStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueInfoProto::ValueInfoProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.ValueInfoProto)
}

void ValueInfoProto::InitAsDefaultInstance() {
  type_ = const_cast< ::onnx::TypeProto*>(
      ::onnx::TypeProto::internal_default_instance());
}

ValueInfoProto::ValueInfoProto(const ValueInfoProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.ValueInfoProto)
}

void ValueInfoProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = NULL;
  _cached_size_ = 0;
}

ValueInfoProto::~ValueInfoProto() {
  // @@protoc_insertion_point(destructor:onnx.ValueInfoProto)
  SharedDtor();
}

void ValueInfoProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ValueInfoProto_default_instance_.get()) {
    delete type_;
  }
}

void ValueInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ValueInfoProto& ValueInfoProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ValueInfoProto> ValueInfoProto_default_instance_;

ValueInfoProto* ValueInfoProto::New(::google::protobuf::Arena* arena) const {
  ValueInfoProto* n = new ValueInfoProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.ValueInfoProto)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && type_ != NULL) delete type_;
  type_ = NULL;
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ValueInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.ValueInfoProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.ValueInfoProto.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional .onnx.TypeProto type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_doc_string;
        break;
      }

      // optional string doc_string = 3;
      case 3: {
        if (tag == 26) {
         parse_doc_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->doc_string().data(), this->doc_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.ValueInfoProto.doc_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.ValueInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.ValueInfoProto)
  return false;
#undef DO_
}

void ValueInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.ValueInfoProto)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.ValueInfoProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .onnx.TypeProto type = 2;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->type_, output);
  }

  // optional string doc_string = 3;
  if (this->doc_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->doc_string().data(), this->doc_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.ValueInfoProto.doc_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->doc_string(), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.ValueInfoProto)
}

size_t ValueInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.ValueInfoProto)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .onnx.TypeProto type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->type_);
  }

  // optional string doc_string = 3;
  if (this->doc_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_string());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueInfoProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ValueInfoProto*>(&from));
}

void ValueInfoProto::MergeFrom(const ValueInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.ValueInfoProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ValueInfoProto::UnsafeMergeFrom(const ValueInfoProto& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_type()) {
    mutable_type()->::onnx::TypeProto::MergeFrom(from.type());
  }
  if (from.doc_string().size() > 0) {

    doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
  }
}

void ValueInfoProto::CopyFrom(const ValueInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.ValueInfoProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ValueInfoProto::IsInitialized() const {

  return true;
}

void ValueInfoProto::Swap(ValueInfoProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueInfoProto::InternalSwap(ValueInfoProto* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  doc_string_.Swap(&other->doc_string_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ValueInfoProto::GetTypeName() const {
  return "onnx.ValueInfoProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValueInfoProto

// optional string name = 1;
void ValueInfoProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ValueInfoProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.ValueInfoProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ValueInfoProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ValueInfoProto.name)
}
void ValueInfoProto::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ValueInfoProto.name)
}
void ValueInfoProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ValueInfoProto.name)
}
::std::string* ValueInfoProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ValueInfoProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ValueInfoProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.ValueInfoProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ValueInfoProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.ValueInfoProto.name)
}

// optional .onnx.TypeProto type = 2;
bool ValueInfoProto::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
void ValueInfoProto::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) delete type_;
  type_ = NULL;
}
const ::onnx::TypeProto& ValueInfoProto::type() const {
  // @@protoc_insertion_point(field_get:onnx.ValueInfoProto.type)
  return type_ != NULL ? *type_
                         : *::onnx::TypeProto::internal_default_instance();
}
::onnx::TypeProto* ValueInfoProto::mutable_type() {
  
  if (type_ == NULL) {
    type_ = new ::onnx::TypeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ValueInfoProto.type)
  return type_;
}
::onnx::TypeProto* ValueInfoProto::release_type() {
  // @@protoc_insertion_point(field_release:onnx.ValueInfoProto.type)
  
  ::onnx::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
void ValueInfoProto::set_allocated_type(::onnx::TypeProto* type) {
  delete type_;
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ValueInfoProto.type)
}

// optional string doc_string = 3;
void ValueInfoProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ValueInfoProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.ValueInfoProto.doc_string)
  return doc_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ValueInfoProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ValueInfoProto.doc_string)
}
void ValueInfoProto::set_doc_string(const char* value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ValueInfoProto.doc_string)
}
void ValueInfoProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ValueInfoProto.doc_string)
}
::std::string* ValueInfoProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ValueInfoProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ValueInfoProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.ValueInfoProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ValueInfoProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.ValueInfoProto.doc_string)
}

inline const ValueInfoProto* ValueInfoProto::internal_default_instance() {
  return &ValueInfoProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeProto::kInputFieldNumber;
const int NodeProto::kOutputFieldNumber;
const int NodeProto::kNameFieldNumber;
const int NodeProto::kOpTypeFieldNumber;
const int NodeProto::kDomainFieldNumber;
const int NodeProto::kAttributeFieldNumber;
const int NodeProto::kDocStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeProto::NodeProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.NodeProto)
}

void NodeProto::InitAsDefaultInstance() {
}

NodeProto::NodeProto(const NodeProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.NodeProto)
}

void NodeProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NodeProto::~NodeProto() {
  // @@protoc_insertion_point(destructor:onnx.NodeProto)
  SharedDtor();
}

void NodeProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NodeProto& NodeProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeProto> NodeProto_default_instance_;

NodeProto* NodeProto::New(::google::protobuf::Arena* arena) const {
  NodeProto* n = new NodeProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.NodeProto)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_.Clear();
  output_.Clear();
  attribute_.Clear();
}

bool NodeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.NodeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string input = 1;
      case 1: {
        if (tag == 10) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.NodeProto.input"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_input;
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // repeated string output = 2;
      case 2: {
        if (tag == 18) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output(this->output_size() - 1).data(),
            this->output(this->output_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.NodeProto.output"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_output;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.NodeProto.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_op_type;
        break;
      }

      // optional string op_type = 4;
      case 4: {
        if (tag == 34) {
         parse_op_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_type().data(), this->op_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.NodeProto.op_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        break;
      }

      // repeated .onnx.AttributeProto attribute = 5;
      case 5: {
        if (tag == 42) {
         parse_attribute:
          DO_(input->IncrementRecursionDepth());
         parse_loop_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_attribute;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_doc_string;
        break;
      }

      // optional string doc_string = 6;
      case 6: {
        if (tag == 50) {
         parse_doc_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->doc_string().data(), this->doc_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.NodeProto.doc_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_domain;
        break;
      }

      // optional string domain = 7;
      case 7: {
        if (tag == 58) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.NodeProto.domain"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.NodeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.NodeProto)
  return false;
#undef DO_
}

void NodeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.NodeProto)
  // repeated string input = 1;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.NodeProto.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->input(i), output);
  }

  // repeated string output = 2;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output(i).data(), this->output(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.NodeProto.output");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->output(i), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.NodeProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string op_type = 4;
  if (this->op_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_type().data(), this->op_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.NodeProto.op_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->op_type(), output);
  }

  // repeated .onnx.AttributeProto attribute = 5;
  for (unsigned int i = 0, n = this->attribute_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->attribute(i), output);
  }

  // optional string doc_string = 6;
  if (this->doc_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->doc_string().data(), this->doc_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.NodeProto.doc_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->doc_string(), output);
  }

  // optional string domain = 7;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.NodeProto.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->domain(), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.NodeProto)
}

size_t NodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.NodeProto)
  size_t total_size = 0;

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string op_type = 4;
  if (this->op_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_type());
  }

  // optional string domain = 7;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // optional string doc_string = 6;
  if (this->doc_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_string());
  }

  // repeated string input = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_size());
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated string output = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_size());
  for (int i = 0; i < this->output_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->output(i));
  }

  // repeated .onnx.AttributeProto attribute = 5;
  {
    unsigned int count = this->attribute_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attribute(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeProto*>(&from));
}

void NodeProto::MergeFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.NodeProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeProto::UnsafeMergeFrom(const NodeProto& from) {
  GOOGLE_DCHECK(&from != this);
  input_.UnsafeMergeFrom(from.input_);
  output_.UnsafeMergeFrom(from.output_);
  attribute_.MergeFrom(from.attribute_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.op_type().size() > 0) {

    op_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_type_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.doc_string().size() > 0) {

    doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
  }
}

void NodeProto::CopyFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.NodeProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeProto::IsInitialized() const {

  return true;
}

void NodeProto::Swap(NodeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeProto::InternalSwap(NodeProto* other) {
  input_.UnsafeArenaSwap(&other->input_);
  output_.UnsafeArenaSwap(&other->output_);
  name_.Swap(&other->name_);
  op_type_.Swap(&other->op_type_);
  domain_.Swap(&other->domain_);
  attribute_.UnsafeArenaSwap(&other->attribute_);
  doc_string_.Swap(&other->doc_string_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NodeProto::GetTypeName() const {
  return "onnx.NodeProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeProto

// repeated string input = 1;
int NodeProto::input_size() const {
  return input_.size();
}
void NodeProto::clear_input() {
  input_.Clear();
}
const ::std::string& NodeProto::input(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.input)
  return input_.Get(index);
}
::std::string* NodeProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.input)
  return input_.Mutable(index);
}
void NodeProto::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.input)
  input_.Mutable(index)->assign(value);
}
void NodeProto::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.input)
}
void NodeProto::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.input)
}
::std::string* NodeProto::add_input() {
  // @@protoc_insertion_point(field_add_mutable:onnx.NodeProto.input)
  return input_.Add();
}
void NodeProto::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.NodeProto.input)
}
void NodeProto::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.NodeProto.input)
}
void NodeProto::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.NodeProto.input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeProto::input() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.input)
  return input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodeProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.input)
  return &input_;
}

// repeated string output = 2;
int NodeProto::output_size() const {
  return output_.size();
}
void NodeProto::clear_output() {
  output_.Clear();
}
const ::std::string& NodeProto::output(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.output)
  return output_.Get(index);
}
::std::string* NodeProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.output)
  return output_.Mutable(index);
}
void NodeProto::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.output)
  output_.Mutable(index)->assign(value);
}
void NodeProto::set_output(int index, const char* value) {
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.output)
}
void NodeProto::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.output)
}
::std::string* NodeProto::add_output() {
  // @@protoc_insertion_point(field_add_mutable:onnx.NodeProto.output)
  return output_.Add();
}
void NodeProto::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.NodeProto.output)
}
void NodeProto::add_output(const char* value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.NodeProto.output)
}
void NodeProto::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.NodeProto.output)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeProto::output() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.output)
  return output_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodeProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.output)
  return &output_;
}

// optional string name = 3;
void NodeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.name)
}
void NodeProto::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.name)
}
void NodeProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.name)
}
::std::string* NodeProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.NodeProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.name)
}

// optional string op_type = 4;
void NodeProto::clear_op_type() {
  op_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeProto::op_type() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.op_type)
  return op_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeProto::set_op_type(const ::std::string& value) {
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.op_type)
}
void NodeProto::set_op_type(const char* value) {
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.op_type)
}
void NodeProto::set_op_type(const char* value, size_t size) {
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.op_type)
}
::std::string* NodeProto::mutable_op_type() {
  
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.op_type)
  return op_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeProto::release_op_type() {
  // @@protoc_insertion_point(field_release:onnx.NodeProto.op_type)
  
  return op_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeProto::set_allocated_op_type(::std::string* op_type) {
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_type);
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.op_type)
}

// optional string domain = 7;
void NodeProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeProto::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.domain)
}
void NodeProto::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.domain)
}
void NodeProto::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.domain)
}
::std::string* NodeProto::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeProto::release_domain() {
  // @@protoc_insertion_point(field_release:onnx.NodeProto.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeProto::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.domain)
}

// repeated .onnx.AttributeProto attribute = 5;
int NodeProto::attribute_size() const {
  return attribute_.size();
}
void NodeProto::clear_attribute() {
  attribute_.Clear();
}
const ::onnx::AttributeProto& NodeProto::attribute(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.attribute)
  return attribute_.Get(index);
}
::onnx::AttributeProto* NodeProto::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.attribute)
  return attribute_.Mutable(index);
}
::onnx::AttributeProto* NodeProto::add_attribute() {
  // @@protoc_insertion_point(field_add:onnx.NodeProto.attribute)
  return attribute_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >*
NodeProto::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.attribute)
  return &attribute_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >&
NodeProto::attribute() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.attribute)
  return attribute_;
}

// optional string doc_string = 6;
void NodeProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.doc_string)
  return doc_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.doc_string)
}
void NodeProto::set_doc_string(const char* value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.doc_string)
}
void NodeProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.doc_string)
}
::std::string* NodeProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.NodeProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.doc_string)
}

inline const NodeProto* NodeProto::internal_default_instance() {
  return &NodeProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrainingInfoProto::kInitializationFieldNumber;
const int TrainingInfoProto::kAlgorithmFieldNumber;
const int TrainingInfoProto::kInitializationBindingFieldNumber;
const int TrainingInfoProto::kUpdateBindingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrainingInfoProto::TrainingInfoProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TrainingInfoProto)
}

void TrainingInfoProto::InitAsDefaultInstance() {
  initialization_ = const_cast< ::onnx::GraphProto*>(
      ::onnx::GraphProto::internal_default_instance());
  algorithm_ = const_cast< ::onnx::GraphProto*>(
      ::onnx::GraphProto::internal_default_instance());
}

TrainingInfoProto::TrainingInfoProto(const TrainingInfoProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TrainingInfoProto)
}

void TrainingInfoProto::SharedCtor() {
  initialization_ = NULL;
  algorithm_ = NULL;
  _cached_size_ = 0;
}

TrainingInfoProto::~TrainingInfoProto() {
  // @@protoc_insertion_point(destructor:onnx.TrainingInfoProto)
  SharedDtor();
}

void TrainingInfoProto::SharedDtor() {
  if (this != &TrainingInfoProto_default_instance_.get()) {
    delete initialization_;
    delete algorithm_;
  }
}

void TrainingInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TrainingInfoProto& TrainingInfoProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TrainingInfoProto> TrainingInfoProto_default_instance_;

TrainingInfoProto* TrainingInfoProto::New(::google::protobuf::Arena* arena) const {
  TrainingInfoProto* n = new TrainingInfoProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrainingInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TrainingInfoProto)
  if (GetArenaNoVirtual() == NULL && initialization_ != NULL) delete initialization_;
  initialization_ = NULL;
  if (GetArenaNoVirtual() == NULL && algorithm_ != NULL) delete algorithm_;
  algorithm_ = NULL;
  initialization_binding_.Clear();
  update_binding_.Clear();
}

bool TrainingInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TrainingInfoProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .onnx.GraphProto initialization = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initialization()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_algorithm;
        break;
      }

      // optional .onnx.GraphProto algorithm = 2;
      case 2: {
        if (tag == 18) {
         parse_algorithm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_algorithm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_initialization_binding;
        break;
      }

      // repeated .onnx.StringStringEntryProto initialization_binding = 3;
      case 3: {
        if (tag == 26) {
         parse_initialization_binding:
          DO_(input->IncrementRecursionDepth());
         parse_loop_initialization_binding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_initialization_binding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_initialization_binding;
        if (input->ExpectTag(34)) goto parse_loop_update_binding;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.StringStringEntryProto update_binding = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_update_binding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_update_binding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_update_binding;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TrainingInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TrainingInfoProto)
  return false;
#undef DO_
}

void TrainingInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TrainingInfoProto)
  // optional .onnx.GraphProto initialization = 1;
  if (this->has_initialization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->initialization_, output);
  }

  // optional .onnx.GraphProto algorithm = 2;
  if (this->has_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->algorithm_, output);
  }

  // repeated .onnx.StringStringEntryProto initialization_binding = 3;
  for (unsigned int i = 0, n = this->initialization_binding_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->initialization_binding(i), output);
  }

  // repeated .onnx.StringStringEntryProto update_binding = 4;
  for (unsigned int i = 0, n = this->update_binding_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->update_binding(i), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TrainingInfoProto)
}

size_t TrainingInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TrainingInfoProto)
  size_t total_size = 0;

  // optional .onnx.GraphProto initialization = 1;
  if (this->has_initialization()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->initialization_);
  }

  // optional .onnx.GraphProto algorithm = 2;
  if (this->has_algorithm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->algorithm_);
  }

  // repeated .onnx.StringStringEntryProto initialization_binding = 3;
  {
    unsigned int count = this->initialization_binding_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initialization_binding(i));
    }
  }

  // repeated .onnx.StringStringEntryProto update_binding = 4;
  {
    unsigned int count = this->update_binding_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_binding(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainingInfoProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrainingInfoProto*>(&from));
}

void TrainingInfoProto::MergeFrom(const TrainingInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TrainingInfoProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TrainingInfoProto::UnsafeMergeFrom(const TrainingInfoProto& from) {
  GOOGLE_DCHECK(&from != this);
  initialization_binding_.MergeFrom(from.initialization_binding_);
  update_binding_.MergeFrom(from.update_binding_);
  if (from.has_initialization()) {
    mutable_initialization()->::onnx::GraphProto::MergeFrom(from.initialization());
  }
  if (from.has_algorithm()) {
    mutable_algorithm()->::onnx::GraphProto::MergeFrom(from.algorithm());
  }
}

void TrainingInfoProto::CopyFrom(const TrainingInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TrainingInfoProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TrainingInfoProto::IsInitialized() const {

  return true;
}

void TrainingInfoProto::Swap(TrainingInfoProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrainingInfoProto::InternalSwap(TrainingInfoProto* other) {
  std::swap(initialization_, other->initialization_);
  std::swap(algorithm_, other->algorithm_);
  initialization_binding_.UnsafeArenaSwap(&other->initialization_binding_);
  update_binding_.UnsafeArenaSwap(&other->update_binding_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TrainingInfoProto::GetTypeName() const {
  return "onnx.TrainingInfoProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrainingInfoProto

// optional .onnx.GraphProto initialization = 1;
bool TrainingInfoProto::has_initialization() const {
  return this != internal_default_instance() && initialization_ != NULL;
}
void TrainingInfoProto::clear_initialization() {
  if (GetArenaNoVirtual() == NULL && initialization_ != NULL) delete initialization_;
  initialization_ = NULL;
}
const ::onnx::GraphProto& TrainingInfoProto::initialization() const {
  // @@protoc_insertion_point(field_get:onnx.TrainingInfoProto.initialization)
  return initialization_ != NULL ? *initialization_
                         : *::onnx::GraphProto::internal_default_instance();
}
::onnx::GraphProto* TrainingInfoProto::mutable_initialization() {
  
  if (initialization_ == NULL) {
    initialization_ = new ::onnx::GraphProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TrainingInfoProto.initialization)
  return initialization_;
}
::onnx::GraphProto* TrainingInfoProto::release_initialization() {
  // @@protoc_insertion_point(field_release:onnx.TrainingInfoProto.initialization)
  
  ::onnx::GraphProto* temp = initialization_;
  initialization_ = NULL;
  return temp;
}
void TrainingInfoProto::set_allocated_initialization(::onnx::GraphProto* initialization) {
  delete initialization_;
  initialization_ = initialization;
  if (initialization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TrainingInfoProto.initialization)
}

// optional .onnx.GraphProto algorithm = 2;
bool TrainingInfoProto::has_algorithm() const {
  return this != internal_default_instance() && algorithm_ != NULL;
}
void TrainingInfoProto::clear_algorithm() {
  if (GetArenaNoVirtual() == NULL && algorithm_ != NULL) delete algorithm_;
  algorithm_ = NULL;
}
const ::onnx::GraphProto& TrainingInfoProto::algorithm() const {
  // @@protoc_insertion_point(field_get:onnx.TrainingInfoProto.algorithm)
  return algorithm_ != NULL ? *algorithm_
                         : *::onnx::GraphProto::internal_default_instance();
}
::onnx::GraphProto* TrainingInfoProto::mutable_algorithm() {
  
  if (algorithm_ == NULL) {
    algorithm_ = new ::onnx::GraphProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TrainingInfoProto.algorithm)
  return algorithm_;
}
::onnx::GraphProto* TrainingInfoProto::release_algorithm() {
  // @@protoc_insertion_point(field_release:onnx.TrainingInfoProto.algorithm)
  
  ::onnx::GraphProto* temp = algorithm_;
  algorithm_ = NULL;
  return temp;
}
void TrainingInfoProto::set_allocated_algorithm(::onnx::GraphProto* algorithm) {
  delete algorithm_;
  algorithm_ = algorithm;
  if (algorithm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TrainingInfoProto.algorithm)
}

// repeated .onnx.StringStringEntryProto initialization_binding = 3;
int TrainingInfoProto::initialization_binding_size() const {
  return initialization_binding_.size();
}
void TrainingInfoProto::clear_initialization_binding() {
  initialization_binding_.Clear();
}
const ::onnx::StringStringEntryProto& TrainingInfoProto::initialization_binding(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TrainingInfoProto.initialization_binding)
  return initialization_binding_.Get(index);
}
::onnx::StringStringEntryProto* TrainingInfoProto::mutable_initialization_binding(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TrainingInfoProto.initialization_binding)
  return initialization_binding_.Mutable(index);
}
::onnx::StringStringEntryProto* TrainingInfoProto::add_initialization_binding() {
  // @@protoc_insertion_point(field_add:onnx.TrainingInfoProto.initialization_binding)
  return initialization_binding_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
TrainingInfoProto::mutable_initialization_binding() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TrainingInfoProto.initialization_binding)
  return &initialization_binding_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
TrainingInfoProto::initialization_binding() const {
  // @@protoc_insertion_point(field_list:onnx.TrainingInfoProto.initialization_binding)
  return initialization_binding_;
}

// repeated .onnx.StringStringEntryProto update_binding = 4;
int TrainingInfoProto::update_binding_size() const {
  return update_binding_.size();
}
void TrainingInfoProto::clear_update_binding() {
  update_binding_.Clear();
}
const ::onnx::StringStringEntryProto& TrainingInfoProto::update_binding(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TrainingInfoProto.update_binding)
  return update_binding_.Get(index);
}
::onnx::StringStringEntryProto* TrainingInfoProto::mutable_update_binding(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TrainingInfoProto.update_binding)
  return update_binding_.Mutable(index);
}
::onnx::StringStringEntryProto* TrainingInfoProto::add_update_binding() {
  // @@protoc_insertion_point(field_add:onnx.TrainingInfoProto.update_binding)
  return update_binding_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
TrainingInfoProto::mutable_update_binding() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TrainingInfoProto.update_binding)
  return &update_binding_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
TrainingInfoProto::update_binding() const {
  // @@protoc_insertion_point(field_list:onnx.TrainingInfoProto.update_binding)
  return update_binding_;
}

inline const TrainingInfoProto* TrainingInfoProto::internal_default_instance() {
  return &TrainingInfoProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelProto::kIrVersionFieldNumber;
const int ModelProto::kOpsetImportFieldNumber;
const int ModelProto::kProducerNameFieldNumber;
const int ModelProto::kProducerVersionFieldNumber;
const int ModelProto::kDomainFieldNumber;
const int ModelProto::kModelVersionFieldNumber;
const int ModelProto::kDocStringFieldNumber;
const int ModelProto::kGraphFieldNumber;
const int ModelProto::kMetadataPropsFieldNumber;
const int ModelProto::kTrainingInfoFieldNumber;
const int ModelProto::kFunctionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelProto::ModelProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.ModelProto)
}

void ModelProto::InitAsDefaultInstance() {
  graph_ = const_cast< ::onnx::GraphProto*>(
      ::onnx::GraphProto::internal_default_instance());
}

ModelProto::ModelProto(const ModelProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.ModelProto)
}

void ModelProto::SharedCtor() {
  producer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_ = NULL;
  ::memset(&ir_version_, 0, reinterpret_cast<char*>(&model_version_) -
    reinterpret_cast<char*>(&ir_version_) + sizeof(model_version_));
  _cached_size_ = 0;
}

ModelProto::~ModelProto() {
  // @@protoc_insertion_point(destructor:onnx.ModelProto)
  SharedDtor();
}

void ModelProto::SharedDtor() {
  producer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ModelProto_default_instance_.get()) {
    delete graph_;
  }
}

void ModelProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModelProto& ModelProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ModelProto> ModelProto_default_instance_;

ModelProto* ModelProto::New(::google::protobuf::Arena* arena) const {
  ModelProto* n = new ModelProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.ModelProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ModelProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModelProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ir_version_, model_version_);
  producer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && graph_ != NULL) delete graph_;
  graph_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  opset_import_.Clear();
  metadata_props_.Clear();
  training_info_.Clear();
  functions_.Clear();
}

bool ModelProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.ModelProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ir_version = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ir_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_producer_name;
        break;
      }

      // optional string producer_name = 2;
      case 2: {
        if (tag == 18) {
         parse_producer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producer_name().data(), this->producer_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.ModelProto.producer_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_producer_version;
        break;
      }

      // optional string producer_version = 3;
      case 3: {
        if (tag == 26) {
         parse_producer_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producer_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producer_version().data(), this->producer_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.ModelProto.producer_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.ModelProto.domain"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_model_version;
        break;
      }

      // optional int64 model_version = 5;
      case 5: {
        if (tag == 40) {
         parse_model_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &model_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_doc_string;
        break;
      }

      // optional string doc_string = 6;
      case 6: {
        if (tag == 50) {
         parse_doc_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->doc_string().data(), this->doc_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.ModelProto.doc_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_graph;
        break;
      }

      // optional .onnx.GraphProto graph = 7;
      case 7: {
        if (tag == 58) {
         parse_graph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_opset_import;
        break;
      }

      // repeated .onnx.OperatorSetIdProto opset_import = 8;
      case 8: {
        if (tag == 66) {
         parse_opset_import:
          DO_(input->IncrementRecursionDepth());
         parse_loop_opset_import:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_opset_import()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_opset_import;
        if (input->ExpectTag(114)) goto parse_loop_metadata_props;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.StringStringEntryProto metadata_props = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_metadata_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metadata_props()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_metadata_props;
        if (input->ExpectTag(162)) goto parse_loop_training_info;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.TrainingInfoProto training_info = 20;
      case 20: {
        if (tag == 162) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_training_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_training_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_training_info;
        if (input->ExpectTag(202)) goto parse_loop_functions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.FunctionProto functions = 25;
      case 25: {
        if (tag == 202) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_functions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_functions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_loop_functions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.ModelProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.ModelProto)
  return false;
#undef DO_
}

void ModelProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.ModelProto)
  // optional int64 ir_version = 1;
  if (this->ir_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ir_version(), output);
  }

  // optional string producer_name = 2;
  if (this->producer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_name().data(), this->producer_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.ModelProto.producer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->producer_name(), output);
  }

  // optional string producer_version = 3;
  if (this->producer_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_version().data(), this->producer_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.ModelProto.producer_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->producer_version(), output);
  }

  // optional string domain = 4;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.ModelProto.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // optional int64 model_version = 5;
  if (this->model_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->model_version(), output);
  }

  // optional string doc_string = 6;
  if (this->doc_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->doc_string().data(), this->doc_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.ModelProto.doc_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->doc_string(), output);
  }

  // optional .onnx.GraphProto graph = 7;
  if (this->has_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->graph_, output);
  }

  // repeated .onnx.OperatorSetIdProto opset_import = 8;
  for (unsigned int i = 0, n = this->opset_import_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->opset_import(i), output);
  }

  // repeated .onnx.StringStringEntryProto metadata_props = 14;
  for (unsigned int i = 0, n = this->metadata_props_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->metadata_props(i), output);
  }

  // repeated .onnx.TrainingInfoProto training_info = 20;
  for (unsigned int i = 0, n = this->training_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->training_info(i), output);
  }

  // repeated .onnx.FunctionProto functions = 25;
  for (unsigned int i = 0, n = this->functions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->functions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.ModelProto)
}

size_t ModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.ModelProto)
  size_t total_size = 0;

  // optional int64 ir_version = 1;
  if (this->ir_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ir_version());
  }

  // optional string producer_name = 2;
  if (this->producer_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->producer_name());
  }

  // optional string producer_version = 3;
  if (this->producer_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->producer_version());
  }

  // optional string domain = 4;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // optional int64 model_version = 5;
  if (this->model_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->model_version());
  }

  // optional string doc_string = 6;
  if (this->doc_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_string());
  }

  // optional .onnx.GraphProto graph = 7;
  if (this->has_graph()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_);
  }

  // repeated .onnx.OperatorSetIdProto opset_import = 8;
  {
    unsigned int count = this->opset_import_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opset_import(i));
    }
  }

  // repeated .onnx.StringStringEntryProto metadata_props = 14;
  {
    unsigned int count = this->metadata_props_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata_props(i));
    }
  }

  // repeated .onnx.TrainingInfoProto training_info = 20;
  {
    unsigned int count = this->training_info_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->training_info(i));
    }
  }

  // repeated .onnx.FunctionProto functions = 25;
  {
    unsigned int count = this->functions_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->functions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModelProto*>(&from));
}

void ModelProto::MergeFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.ModelProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ModelProto::UnsafeMergeFrom(const ModelProto& from) {
  GOOGLE_DCHECK(&from != this);
  opset_import_.MergeFrom(from.opset_import_);
  metadata_props_.MergeFrom(from.metadata_props_);
  training_info_.MergeFrom(from.training_info_);
  functions_.MergeFrom(from.functions_);
  if (from.ir_version() != 0) {
    set_ir_version(from.ir_version());
  }
  if (from.producer_name().size() > 0) {

    producer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_name_);
  }
  if (from.producer_version().size() > 0) {

    producer_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_version_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.model_version() != 0) {
    set_model_version(from.model_version());
  }
  if (from.doc_string().size() > 0) {

    doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
  }
  if (from.has_graph()) {
    mutable_graph()->::onnx::GraphProto::MergeFrom(from.graph());
  }
}

void ModelProto::CopyFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.ModelProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ModelProto::IsInitialized() const {

  return true;
}

void ModelProto::Swap(ModelProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelProto::InternalSwap(ModelProto* other) {
  std::swap(ir_version_, other->ir_version_);
  opset_import_.UnsafeArenaSwap(&other->opset_import_);
  producer_name_.Swap(&other->producer_name_);
  producer_version_.Swap(&other->producer_version_);
  domain_.Swap(&other->domain_);
  std::swap(model_version_, other->model_version_);
  doc_string_.Swap(&other->doc_string_);
  std::swap(graph_, other->graph_);
  metadata_props_.UnsafeArenaSwap(&other->metadata_props_);
  training_info_.UnsafeArenaSwap(&other->training_info_);
  functions_.UnsafeArenaSwap(&other->functions_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ModelProto::GetTypeName() const {
  return "onnx.ModelProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelProto

// optional int64 ir_version = 1;
void ModelProto::clear_ir_version() {
  ir_version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ModelProto::ir_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.ir_version)
  return ir_version_;
}
void ModelProto::set_ir_version(::google::protobuf::int64 value) {
  
  ir_version_ = value;
  // @@protoc_insertion_point(field_set:onnx.ModelProto.ir_version)
}

// repeated .onnx.OperatorSetIdProto opset_import = 8;
int ModelProto::opset_import_size() const {
  return opset_import_.size();
}
void ModelProto::clear_opset_import() {
  opset_import_.Clear();
}
const ::onnx::OperatorSetIdProto& ModelProto::opset_import(int index) const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.opset_import)
  return opset_import_.Get(index);
}
::onnx::OperatorSetIdProto* ModelProto::mutable_opset_import(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.opset_import)
  return opset_import_.Mutable(index);
}
::onnx::OperatorSetIdProto* ModelProto::add_opset_import() {
  // @@protoc_insertion_point(field_add:onnx.ModelProto.opset_import)
  return opset_import_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >*
ModelProto::mutable_opset_import() {
  // @@protoc_insertion_point(field_mutable_list:onnx.ModelProto.opset_import)
  return &opset_import_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >&
ModelProto::opset_import() const {
  // @@protoc_insertion_point(field_list:onnx.ModelProto.opset_import)
  return opset_import_;
}

// optional string producer_name = 2;
void ModelProto::clear_producer_name() {
  producer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ModelProto::producer_name() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.producer_name)
  return producer_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelProto::set_producer_name(const ::std::string& value) {
  
  producer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.producer_name)
}
void ModelProto::set_producer_name(const char* value) {
  
  producer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.producer_name)
}
void ModelProto::set_producer_name(const char* value, size_t size) {
  
  producer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.producer_name)
}
::std::string* ModelProto::mutable_producer_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.producer_name)
  return producer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModelProto::release_producer_name() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.producer_name)
  
  return producer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelProto::set_allocated_producer_name(::std::string* producer_name) {
  if (producer_name != NULL) {
    
  } else {
    
  }
  producer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_name);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.producer_name)
}

// optional string producer_version = 3;
void ModelProto::clear_producer_version() {
  producer_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ModelProto::producer_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.producer_version)
  return producer_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelProto::set_producer_version(const ::std::string& value) {
  
  producer_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.producer_version)
}
void ModelProto::set_producer_version(const char* value) {
  
  producer_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.producer_version)
}
void ModelProto::set_producer_version(const char* value, size_t size) {
  
  producer_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.producer_version)
}
::std::string* ModelProto::mutable_producer_version() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.producer_version)
  return producer_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModelProto::release_producer_version() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.producer_version)
  
  return producer_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelProto::set_allocated_producer_version(::std::string* producer_version) {
  if (producer_version != NULL) {
    
  } else {
    
  }
  producer_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_version);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.producer_version)
}

// optional string domain = 4;
void ModelProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ModelProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelProto::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.domain)
}
void ModelProto::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.domain)
}
void ModelProto::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.domain)
}
::std::string* ModelProto::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModelProto::release_domain() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelProto::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.domain)
}

// optional int64 model_version = 5;
void ModelProto::clear_model_version() {
  model_version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ModelProto::model_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.model_version)
  return model_version_;
}
void ModelProto::set_model_version(::google::protobuf::int64 value) {
  
  model_version_ = value;
  // @@protoc_insertion_point(field_set:onnx.ModelProto.model_version)
}

// optional string doc_string = 6;
void ModelProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ModelProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.doc_string)
  return doc_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.doc_string)
}
void ModelProto::set_doc_string(const char* value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.doc_string)
}
void ModelProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.doc_string)
}
::std::string* ModelProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModelProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.doc_string)
}

// optional .onnx.GraphProto graph = 7;
bool ModelProto::has_graph() const {
  return this != internal_default_instance() && graph_ != NULL;
}
void ModelProto::clear_graph() {
  if (GetArenaNoVirtual() == NULL && graph_ != NULL) delete graph_;
  graph_ = NULL;
}
const ::onnx::GraphProto& ModelProto::graph() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.graph)
  return graph_ != NULL ? *graph_
                         : *::onnx::GraphProto::internal_default_instance();
}
::onnx::GraphProto* ModelProto::mutable_graph() {
  
  if (graph_ == NULL) {
    graph_ = new ::onnx::GraphProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.graph)
  return graph_;
}
::onnx::GraphProto* ModelProto::release_graph() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.graph)
  
  ::onnx::GraphProto* temp = graph_;
  graph_ = NULL;
  return temp;
}
void ModelProto::set_allocated_graph(::onnx::GraphProto* graph) {
  delete graph_;
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.graph)
}

// repeated .onnx.StringStringEntryProto metadata_props = 14;
int ModelProto::metadata_props_size() const {
  return metadata_props_.size();
}
void ModelProto::clear_metadata_props() {
  metadata_props_.Clear();
}
const ::onnx::StringStringEntryProto& ModelProto::metadata_props(int index) const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.metadata_props)
  return metadata_props_.Get(index);
}
::onnx::StringStringEntryProto* ModelProto::mutable_metadata_props(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.metadata_props)
  return metadata_props_.Mutable(index);
}
::onnx::StringStringEntryProto* ModelProto::add_metadata_props() {
  // @@protoc_insertion_point(field_add:onnx.ModelProto.metadata_props)
  return metadata_props_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
ModelProto::mutable_metadata_props() {
  // @@protoc_insertion_point(field_mutable_list:onnx.ModelProto.metadata_props)
  return &metadata_props_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
ModelProto::metadata_props() const {
  // @@protoc_insertion_point(field_list:onnx.ModelProto.metadata_props)
  return metadata_props_;
}

// repeated .onnx.TrainingInfoProto training_info = 20;
int ModelProto::training_info_size() const {
  return training_info_.size();
}
void ModelProto::clear_training_info() {
  training_info_.Clear();
}
const ::onnx::TrainingInfoProto& ModelProto::training_info(int index) const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.training_info)
  return training_info_.Get(index);
}
::onnx::TrainingInfoProto* ModelProto::mutable_training_info(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.training_info)
  return training_info_.Mutable(index);
}
::onnx::TrainingInfoProto* ModelProto::add_training_info() {
  // @@protoc_insertion_point(field_add:onnx.ModelProto.training_info)
  return training_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::TrainingInfoProto >*
ModelProto::mutable_training_info() {
  // @@protoc_insertion_point(field_mutable_list:onnx.ModelProto.training_info)
  return &training_info_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::TrainingInfoProto >&
ModelProto::training_info() const {
  // @@protoc_insertion_point(field_list:onnx.ModelProto.training_info)
  return training_info_;
}

// repeated .onnx.FunctionProto functions = 25;
int ModelProto::functions_size() const {
  return functions_.size();
}
void ModelProto::clear_functions() {
  functions_.Clear();
}
const ::onnx::FunctionProto& ModelProto::functions(int index) const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.functions)
  return functions_.Get(index);
}
::onnx::FunctionProto* ModelProto::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.functions)
  return functions_.Mutable(index);
}
::onnx::FunctionProto* ModelProto::add_functions() {
  // @@protoc_insertion_point(field_add:onnx.ModelProto.functions)
  return functions_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::FunctionProto >*
ModelProto::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:onnx.ModelProto.functions)
  return &functions_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::FunctionProto >&
ModelProto::functions() const {
  // @@protoc_insertion_point(field_list:onnx.ModelProto.functions)
  return functions_;
}

inline const ModelProto* ModelProto::internal_default_instance() {
  return &ModelProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringStringEntryProto::kKeyFieldNumber;
const int StringStringEntryProto::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringStringEntryProto::StringStringEntryProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.StringStringEntryProto)
}

void StringStringEntryProto::InitAsDefaultInstance() {
}

StringStringEntryProto::StringStringEntryProto(const StringStringEntryProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.StringStringEntryProto)
}

void StringStringEntryProto::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StringStringEntryProto::~StringStringEntryProto() {
  // @@protoc_insertion_point(destructor:onnx.StringStringEntryProto)
  SharedDtor();
}

void StringStringEntryProto::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StringStringEntryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StringStringEntryProto& StringStringEntryProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StringStringEntryProto> StringStringEntryProto_default_instance_;

StringStringEntryProto* StringStringEntryProto::New(::google::protobuf::Arena* arena) const {
  StringStringEntryProto* n = new StringStringEntryProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringStringEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.StringStringEntryProto)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StringStringEntryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.StringStringEntryProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.StringStringEntryProto.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.StringStringEntryProto.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.StringStringEntryProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.StringStringEntryProto)
  return false;
#undef DO_
}

void StringStringEntryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.StringStringEntryProto)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.StringStringEntryProto.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.StringStringEntryProto.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.StringStringEntryProto)
}

size_t StringStringEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.StringStringEntryProto)
  size_t total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringStringEntryProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StringStringEntryProto*>(&from));
}

void StringStringEntryProto::MergeFrom(const StringStringEntryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.StringStringEntryProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StringStringEntryProto::UnsafeMergeFrom(const StringStringEntryProto& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void StringStringEntryProto::CopyFrom(const StringStringEntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.StringStringEntryProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StringStringEntryProto::IsInitialized() const {

  return true;
}

void StringStringEntryProto::Swap(StringStringEntryProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringStringEntryProto::InternalSwap(StringStringEntryProto* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StringStringEntryProto::GetTypeName() const {
  return "onnx.StringStringEntryProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringStringEntryProto

// optional string key = 1;
void StringStringEntryProto::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StringStringEntryProto::key() const {
  // @@protoc_insertion_point(field_get:onnx.StringStringEntryProto.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StringStringEntryProto::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.StringStringEntryProto.key)
}
void StringStringEntryProto::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.StringStringEntryProto.key)
}
void StringStringEntryProto::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.StringStringEntryProto.key)
}
::std::string* StringStringEntryProto::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:onnx.StringStringEntryProto.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StringStringEntryProto::release_key() {
  // @@protoc_insertion_point(field_release:onnx.StringStringEntryProto.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StringStringEntryProto::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:onnx.StringStringEntryProto.key)
}

// optional string value = 2;
void StringStringEntryProto::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StringStringEntryProto::value() const {
  // @@protoc_insertion_point(field_get:onnx.StringStringEntryProto.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StringStringEntryProto::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.StringStringEntryProto.value)
}
void StringStringEntryProto::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.StringStringEntryProto.value)
}
void StringStringEntryProto::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.StringStringEntryProto.value)
}
::std::string* StringStringEntryProto::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:onnx.StringStringEntryProto.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StringStringEntryProto::release_value() {
  // @@protoc_insertion_point(field_release:onnx.StringStringEntryProto.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StringStringEntryProto::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:onnx.StringStringEntryProto.value)
}

inline const StringStringEntryProto* StringStringEntryProto::internal_default_instance() {
  return &StringStringEntryProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorAnnotation::kTensorNameFieldNumber;
const int TensorAnnotation::kQuantParameterTensorNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorAnnotation::TensorAnnotation()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TensorAnnotation)
}

void TensorAnnotation::InitAsDefaultInstance() {
}

TensorAnnotation::TensorAnnotation(const TensorAnnotation& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TensorAnnotation)
}

void TensorAnnotation::SharedCtor() {
  tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TensorAnnotation::~TensorAnnotation() {
  // @@protoc_insertion_point(destructor:onnx.TensorAnnotation)
  SharedDtor();
}

void TensorAnnotation::SharedDtor() {
  tensor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TensorAnnotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorAnnotation& TensorAnnotation::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TensorAnnotation> TensorAnnotation_default_instance_;

TensorAnnotation* TensorAnnotation::New(::google::protobuf::Arena* arena) const {
  TensorAnnotation* n = new TensorAnnotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorAnnotation)
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quant_parameter_tensor_names_.Clear();
}

bool TensorAnnotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TensorAnnotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tensor_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), this->tensor_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.TensorAnnotation.tensor_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quant_parameter_tensor_names;
        break;
      }

      // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
      case 2: {
        if (tag == 18) {
         parse_quant_parameter_tensor_names:
          DO_(input->IncrementRecursionDepth());
         parse_loop_quant_parameter_tensor_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_quant_parameter_tensor_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_quant_parameter_tensor_names;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TensorAnnotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TensorAnnotation)
  return false;
#undef DO_
}

void TensorAnnotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TensorAnnotation)
  // optional string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), this->tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.TensorAnnotation.tensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tensor_name(), output);
  }

  // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
  for (unsigned int i = 0, n = this->quant_parameter_tensor_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->quant_parameter_tensor_names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TensorAnnotation)
}

size_t TensorAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorAnnotation)
  size_t total_size = 0;

  // optional string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
  {
    unsigned int count = this->quant_parameter_tensor_names_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quant_parameter_tensor_names(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorAnnotation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorAnnotation*>(&from));
}

void TensorAnnotation::MergeFrom(const TensorAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorAnnotation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TensorAnnotation::UnsafeMergeFrom(const TensorAnnotation& from) {
  GOOGLE_DCHECK(&from != this);
  quant_parameter_tensor_names_.MergeFrom(from.quant_parameter_tensor_names_);
  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
}

void TensorAnnotation::CopyFrom(const TensorAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorAnnotation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TensorAnnotation::IsInitialized() const {

  return true;
}

void TensorAnnotation::Swap(TensorAnnotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorAnnotation::InternalSwap(TensorAnnotation* other) {
  tensor_name_.Swap(&other->tensor_name_);
  quant_parameter_tensor_names_.UnsafeArenaSwap(&other->quant_parameter_tensor_names_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorAnnotation::GetTypeName() const {
  return "onnx.TensorAnnotation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorAnnotation

// optional string tensor_name = 1;
void TensorAnnotation::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TensorAnnotation::tensor_name() const {
  // @@protoc_insertion_point(field_get:onnx.TensorAnnotation.tensor_name)
  return tensor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorAnnotation::set_tensor_name(const ::std::string& value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorAnnotation.tensor_name)
}
void TensorAnnotation::set_tensor_name(const char* value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorAnnotation.tensor_name)
}
void TensorAnnotation::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorAnnotation.tensor_name)
}
::std::string* TensorAnnotation::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TensorAnnotation.tensor_name)
  return tensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorAnnotation::release_tensor_name() {
  // @@protoc_insertion_point(field_release:onnx.TensorAnnotation.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorAnnotation::set_allocated_tensor_name(::std::string* tensor_name) {
  if (tensor_name != NULL) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorAnnotation.tensor_name)
}

// repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
int TensorAnnotation::quant_parameter_tensor_names_size() const {
  return quant_parameter_tensor_names_.size();
}
void TensorAnnotation::clear_quant_parameter_tensor_names() {
  quant_parameter_tensor_names_.Clear();
}
const ::onnx::StringStringEntryProto& TensorAnnotation::quant_parameter_tensor_names(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_.Get(index);
}
::onnx::StringStringEntryProto* TensorAnnotation::mutable_quant_parameter_tensor_names(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_.Mutable(index);
}
::onnx::StringStringEntryProto* TensorAnnotation::add_quant_parameter_tensor_names() {
  // @@protoc_insertion_point(field_add:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
TensorAnnotation::mutable_quant_parameter_tensor_names() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return &quant_parameter_tensor_names_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
TensorAnnotation::quant_parameter_tensor_names() const {
  // @@protoc_insertion_point(field_list:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_;
}

inline const TensorAnnotation* TensorAnnotation::internal_default_instance() {
  return &TensorAnnotation_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphProto::kNodeFieldNumber;
const int GraphProto::kNameFieldNumber;
const int GraphProto::kInitializerFieldNumber;
const int GraphProto::kSparseInitializerFieldNumber;
const int GraphProto::kDocStringFieldNumber;
const int GraphProto::kInputFieldNumber;
const int GraphProto::kOutputFieldNumber;
const int GraphProto::kValueInfoFieldNumber;
const int GraphProto::kQuantizationAnnotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphProto::GraphProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.GraphProto)
}

void GraphProto::InitAsDefaultInstance() {
}

GraphProto::GraphProto(const GraphProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.GraphProto)
}

void GraphProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GraphProto::~GraphProto() {
  // @@protoc_insertion_point(destructor:onnx.GraphProto)
  SharedDtor();
}

void GraphProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GraphProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GraphProto& GraphProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GraphProto> GraphProto_default_instance_;

GraphProto* GraphProto::New(::google::protobuf::Arena* arena) const {
  GraphProto* n = new GraphProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GraphProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.GraphProto)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.Clear();
  initializer_.Clear();
  sparse_initializer_.Clear();
  input_.Clear();
  output_.Clear();
  value_info_.Clear();
  quantization_annotation_.Clear();
}

bool GraphProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.GraphProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .onnx.NodeProto node = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_node;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.GraphProto.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_initializer;
        break;
      }

      // repeated .onnx.TensorProto initializer = 5;
      case 5: {
        if (tag == 42) {
         parse_initializer:
          DO_(input->IncrementRecursionDepth());
         parse_loop_initializer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_initializer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_initializer;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_doc_string;
        break;
      }

      // optional string doc_string = 10;
      case 10: {
        if (tag == 82) {
         parse_doc_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->doc_string().data(), this->doc_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.GraphProto.doc_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_input;
        break;
      }

      // repeated .onnx.ValueInfoProto input = 11;
      case 11: {
        if (tag == 90) {
         parse_input:
          DO_(input->IncrementRecursionDepth());
         parse_loop_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_input;
        if (input->ExpectTag(98)) goto parse_loop_output;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.ValueInfoProto output = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_output()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_output;
        if (input->ExpectTag(106)) goto parse_loop_value_info;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.ValueInfoProto value_info = 13;
      case 13: {
        if (tag == 106) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_value_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_value_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_value_info;
        if (input->ExpectTag(114)) goto parse_loop_quantization_annotation;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.TensorAnnotation quantization_annotation = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_quantization_annotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_quantization_annotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_quantization_annotation;
        if (input->ExpectTag(122)) goto parse_loop_sparse_initializer;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .onnx.SparseTensorProto sparse_initializer = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sparse_initializer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sparse_initializer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_sparse_initializer;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.GraphProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.GraphProto)
  return false;
#undef DO_
}

void GraphProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.GraphProto)
  // repeated .onnx.NodeProto node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->node(i), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.GraphProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .onnx.TensorProto initializer = 5;
  for (unsigned int i = 0, n = this->initializer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->initializer(i), output);
  }

  // optional string doc_string = 10;
  if (this->doc_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->doc_string().data(), this->doc_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.GraphProto.doc_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->doc_string(), output);
  }

  // repeated .onnx.ValueInfoProto input = 11;
  for (unsigned int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->input(i), output);
  }

  // repeated .onnx.ValueInfoProto output = 12;
  for (unsigned int i = 0, n = this->output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->output(i), output);
  }

  // repeated .onnx.ValueInfoProto value_info = 13;
  for (unsigned int i = 0, n = this->value_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->value_info(i), output);
  }

  // repeated .onnx.TensorAnnotation quantization_annotation = 14;
  for (unsigned int i = 0, n = this->quantization_annotation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->quantization_annotation(i), output);
  }

  // repeated .onnx.SparseTensorProto sparse_initializer = 15;
  for (unsigned int i = 0, n = this->sparse_initializer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->sparse_initializer(i), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.GraphProto)
}

size_t GraphProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.GraphProto)
  size_t total_size = 0;

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string doc_string = 10;
  if (this->doc_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_string());
  }

  // repeated .onnx.NodeProto node = 1;
  {
    unsigned int count = this->node_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node(i));
    }
  }

  // repeated .onnx.TensorProto initializer = 5;
  {
    unsigned int count = this->initializer_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initializer(i));
    }
  }

  // repeated .onnx.SparseTensorProto sparse_initializer = 15;
  {
    unsigned int count = this->sparse_initializer_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sparse_initializer(i));
    }
  }

  // repeated .onnx.ValueInfoProto input = 11;
  {
    unsigned int count = this->input_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input(i));
    }
  }

  // repeated .onnx.ValueInfoProto output = 12;
  {
    unsigned int count = this->output_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output(i));
    }
  }

  // repeated .onnx.ValueInfoProto value_info = 13;
  {
    unsigned int count = this->value_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_info(i));
    }
  }

  // repeated .onnx.TensorAnnotation quantization_annotation = 14;
  {
    unsigned int count = this->quantization_annotation_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quantization_annotation(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GraphProto*>(&from));
}

void GraphProto::MergeFrom(const GraphProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.GraphProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GraphProto::UnsafeMergeFrom(const GraphProto& from) {
  GOOGLE_DCHECK(&from != this);
  node_.MergeFrom(from.node_);
  initializer_.MergeFrom(from.initializer_);
  sparse_initializer_.MergeFrom(from.sparse_initializer_);
  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  value_info_.MergeFrom(from.value_info_);
  quantization_annotation_.MergeFrom(from.quantization_annotation_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.doc_string().size() > 0) {

    doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
  }
}

void GraphProto::CopyFrom(const GraphProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.GraphProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GraphProto::IsInitialized() const {

  return true;
}

void GraphProto::Swap(GraphProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GraphProto::InternalSwap(GraphProto* other) {
  node_.UnsafeArenaSwap(&other->node_);
  name_.Swap(&other->name_);
  initializer_.UnsafeArenaSwap(&other->initializer_);
  sparse_initializer_.UnsafeArenaSwap(&other->sparse_initializer_);
  doc_string_.Swap(&other->doc_string_);
  input_.UnsafeArenaSwap(&other->input_);
  output_.UnsafeArenaSwap(&other->output_);
  value_info_.UnsafeArenaSwap(&other->value_info_);
  quantization_annotation_.UnsafeArenaSwap(&other->quantization_annotation_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GraphProto::GetTypeName() const {
  return "onnx.GraphProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphProto

// repeated .onnx.NodeProto node = 1;
int GraphProto::node_size() const {
  return node_.size();
}
void GraphProto::clear_node() {
  node_.Clear();
}
const ::onnx::NodeProto& GraphProto::node(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.node)
  return node_.Get(index);
}
::onnx::NodeProto* GraphProto::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.node)
  return node_.Mutable(index);
}
::onnx::NodeProto* GraphProto::add_node() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >*
GraphProto::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >&
GraphProto::node() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.node)
  return node_;
}

// optional string name = 2;
void GraphProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GraphProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.GraphProto.name)
}
void GraphProto::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.GraphProto.name)
}
void GraphProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.GraphProto.name)
}
::std::string* GraphProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GraphProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.GraphProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.GraphProto.name)
}

// repeated .onnx.TensorProto initializer = 5;
int GraphProto::initializer_size() const {
  return initializer_.size();
}
void GraphProto::clear_initializer() {
  initializer_.Clear();
}
const ::onnx::TensorProto& GraphProto::initializer(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.initializer)
  return initializer_.Get(index);
}
::onnx::TensorProto* GraphProto::mutable_initializer(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.initializer)
  return initializer_.Mutable(index);
}
::onnx::TensorProto* GraphProto::add_initializer() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.initializer)
  return initializer_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
GraphProto::mutable_initializer() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.initializer)
  return &initializer_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
GraphProto::initializer() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.initializer)
  return initializer_;
}

// repeated .onnx.SparseTensorProto sparse_initializer = 15;
int GraphProto::sparse_initializer_size() const {
  return sparse_initializer_.size();
}
void GraphProto::clear_sparse_initializer() {
  sparse_initializer_.Clear();
}
const ::onnx::SparseTensorProto& GraphProto::sparse_initializer(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.sparse_initializer)
  return sparse_initializer_.Get(index);
}
::onnx::SparseTensorProto* GraphProto::mutable_sparse_initializer(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.sparse_initializer)
  return sparse_initializer_.Mutable(index);
}
::onnx::SparseTensorProto* GraphProto::add_sparse_initializer() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.sparse_initializer)
  return sparse_initializer_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >*
GraphProto::mutable_sparse_initializer() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.sparse_initializer)
  return &sparse_initializer_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >&
GraphProto::sparse_initializer() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.sparse_initializer)
  return sparse_initializer_;
}

// optional string doc_string = 10;
void GraphProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GraphProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.doc_string)
  return doc_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.GraphProto.doc_string)
}
void GraphProto::set_doc_string(const char* value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.GraphProto.doc_string)
}
void GraphProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.GraphProto.doc_string)
}
::std::string* GraphProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GraphProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.GraphProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.GraphProto.doc_string)
}

// repeated .onnx.ValueInfoProto input = 11;
int GraphProto::input_size() const {
  return input_.size();
}
void GraphProto::clear_input() {
  input_.Clear();
}
const ::onnx::ValueInfoProto& GraphProto::input(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.input)
  return input_.Get(index);
}
::onnx::ValueInfoProto* GraphProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.input)
  return input_.Mutable(index);
}
::onnx::ValueInfoProto* GraphProto::add_input() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.input)
  return input_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.input)
  return &input_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::input() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.input)
  return input_;
}

// repeated .onnx.ValueInfoProto output = 12;
int GraphProto::output_size() const {
  return output_.size();
}
void GraphProto::clear_output() {
  output_.Clear();
}
const ::onnx::ValueInfoProto& GraphProto::output(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.output)
  return output_.Get(index);
}
::onnx::ValueInfoProto* GraphProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.output)
  return output_.Mutable(index);
}
::onnx::ValueInfoProto* GraphProto::add_output() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.output)
  return output_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.output)
  return &output_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::output() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.output)
  return output_;
}

// repeated .onnx.ValueInfoProto value_info = 13;
int GraphProto::value_info_size() const {
  return value_info_.size();
}
void GraphProto::clear_value_info() {
  value_info_.Clear();
}
const ::onnx::ValueInfoProto& GraphProto::value_info(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.value_info)
  return value_info_.Get(index);
}
::onnx::ValueInfoProto* GraphProto::mutable_value_info(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.value_info)
  return value_info_.Mutable(index);
}
::onnx::ValueInfoProto* GraphProto::add_value_info() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.value_info)
  return value_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_value_info() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.value_info)
  return &value_info_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::value_info() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.value_info)
  return value_info_;
}

// repeated .onnx.TensorAnnotation quantization_annotation = 14;
int GraphProto::quantization_annotation_size() const {
  return quantization_annotation_.size();
}
void GraphProto::clear_quantization_annotation() {
  quantization_annotation_.Clear();
}
const ::onnx::TensorAnnotation& GraphProto::quantization_annotation(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_.Get(index);
}
::onnx::TensorAnnotation* GraphProto::mutable_quantization_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_.Mutable(index);
}
::onnx::TensorAnnotation* GraphProto::add_quantization_annotation() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation >*
GraphProto::mutable_quantization_annotation() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.quantization_annotation)
  return &quantization_annotation_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation >&
GraphProto::quantization_annotation() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_;
}

inline const GraphProto* GraphProto::internal_default_instance() {
  return &GraphProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool TensorProto_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TensorProto_DataType TensorProto::UNDEFINED;
const TensorProto_DataType TensorProto::FLOAT;
const TensorProto_DataType TensorProto::UINT8;
const TensorProto_DataType TensorProto::INT8;
const TensorProto_DataType TensorProto::UINT16;
const TensorProto_DataType TensorProto::INT16;
const TensorProto_DataType TensorProto::INT32;
const TensorProto_DataType TensorProto::INT64;
const TensorProto_DataType TensorProto::STRING;
const TensorProto_DataType TensorProto::BOOL;
const TensorProto_DataType TensorProto::FLOAT16;
const TensorProto_DataType TensorProto::DOUBLE;
const TensorProto_DataType TensorProto::UINT32;
const TensorProto_DataType TensorProto::UINT64;
const TensorProto_DataType TensorProto::COMPLEX64;
const TensorProto_DataType TensorProto::COMPLEX128;
const TensorProto_DataType TensorProto::BFLOAT16;
const TensorProto_DataType TensorProto::DataType_MIN;
const TensorProto_DataType TensorProto::DataType_MAX;
const int TensorProto::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TensorProto_DataLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TensorProto_DataLocation TensorProto::DEFAULT;
const TensorProto_DataLocation TensorProto::EXTERNAL;
const TensorProto_DataLocation TensorProto::DataLocation_MIN;
const TensorProto_DataLocation TensorProto::DataLocation_MAX;
const int TensorProto::DataLocation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorProto_Segment::kBeginFieldNumber;
const int TensorProto_Segment::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorProto_Segment::TensorProto_Segment()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TensorProto.Segment)
}

void TensorProto_Segment::InitAsDefaultInstance() {
}

TensorProto_Segment::TensorProto_Segment(const TensorProto_Segment& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TensorProto.Segment)
}

void TensorProto_Segment::SharedCtor() {
  ::memset(&begin_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_) + sizeof(end_));
  _cached_size_ = 0;
}

TensorProto_Segment::~TensorProto_Segment() {
  // @@protoc_insertion_point(destructor:onnx.TensorProto.Segment)
  SharedDtor();
}

void TensorProto_Segment::SharedDtor() {
}

void TensorProto_Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorProto_Segment& TensorProto_Segment::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TensorProto_Segment> TensorProto_Segment_default_instance_;

TensorProto_Segment* TensorProto_Segment::New(::google::protobuf::Arena* arena) const {
  TensorProto_Segment* n = new TensorProto_Segment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorProto_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorProto.Segment)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TensorProto_Segment, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TensorProto_Segment*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(begin_, end_);

#undef ZR_HELPER_
#undef ZR_

}

bool TensorProto_Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TensorProto.Segment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 begin = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // optional int64 end = 2;
      case 2: {
        if (tag == 16) {
         parse_end:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TensorProto.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TensorProto.Segment)
  return false;
#undef DO_
}

void TensorProto_Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TensorProto.Segment)
  // optional int64 begin = 1;
  if (this->begin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begin(), output);
  }

  // optional int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TensorProto.Segment)
}

size_t TensorProto_Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorProto.Segment)
  size_t total_size = 0;

  // optional int64 begin = 1;
  if (this->begin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begin());
  }

  // optional int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProto_Segment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorProto_Segment*>(&from));
}

void TensorProto_Segment::MergeFrom(const TensorProto_Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorProto.Segment)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TensorProto_Segment::UnsafeMergeFrom(const TensorProto_Segment& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.begin() != 0) {
    set_begin(from.begin());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void TensorProto_Segment::CopyFrom(const TensorProto_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorProto.Segment)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TensorProto_Segment::IsInitialized() const {

  return true;
}

void TensorProto_Segment::Swap(TensorProto_Segment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorProto_Segment::InternalSwap(TensorProto_Segment* other) {
  std::swap(begin_, other->begin_);
  std::swap(end_, other->end_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorProto_Segment::GetTypeName() const {
  return "onnx.TensorProto.Segment";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorProto::kDimsFieldNumber;
const int TensorProto::kDataTypeFieldNumber;
const int TensorProto::kSegmentFieldNumber;
const int TensorProto::kFloatDataFieldNumber;
const int TensorProto::kInt32DataFieldNumber;
const int TensorProto::kStringDataFieldNumber;
const int TensorProto::kInt64DataFieldNumber;
const int TensorProto::kNameFieldNumber;
const int TensorProto::kDocStringFieldNumber;
const int TensorProto::kRawDataFieldNumber;
const int TensorProto::kExternalDataFieldNumber;
const int TensorProto::kDataLocationFieldNumber;
const int TensorProto::kDoubleDataFieldNumber;
const int TensorProto::kUint64DataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorProto::TensorProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TensorProto)
}

void TensorProto::InitAsDefaultInstance() {
  segment_ = const_cast< ::onnx::TensorProto_Segment*>(
      ::onnx::TensorProto_Segment::internal_default_instance());
}

TensorProto::TensorProto(const TensorProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TensorProto)
}

void TensorProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  segment_ = NULL;
  ::memset(&data_type_, 0, reinterpret_cast<char*>(&data_location_) -
    reinterpret_cast<char*>(&data_type_) + sizeof(data_location_));
  _cached_size_ = 0;
}

TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:onnx.TensorProto)
  SharedDtor();
}

void TensorProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TensorProto_default_instance_.get()) {
    delete segment_;
  }
}

void TensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorProto& TensorProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TensorProto> TensorProto_default_instance_;

TensorProto* TensorProto::New(::google::protobuf::Arena* arena) const {
  TensorProto* n = new TensorProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorProto)
  data_type_ = 0;
  if (GetArenaNoVirtual() == NULL && segment_ != NULL) delete segment_;
  segment_ = NULL;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_location_ = 0;
  dims_.Clear();
  float_data_.Clear();
  int32_data_.Clear();
  string_data_.Clear();
  int64_data_.Clear();
  external_data_.Clear();
  double_data_.Clear();
  uint64_data_.Clear();
}

bool TensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TensorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dims = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }

      // optional int32 data_type = 2;
      case 2: {
        if (tag == 16) {
         parse_data_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_segment;
        break;
      }

      // optional .onnx.TensorProto.Segment segment = 3;
      case 3: {
        if (tag == 26) {
         parse_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_float_data;
        break;
      }

      // repeated float float_data = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_float_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_int32_data;
        break;
      }

      // repeated int32 int32_data = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_int32_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_data())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_int32_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_string_data;
        break;
      }

      // repeated bytes string_data = 6;
      case 6: {
        if (tag == 50) {
         parse_string_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_string_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_string_data;
        if (input->ExpectTag(58)) goto parse_int64_data;
        break;
      }

      // repeated int64 int64_data = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_int64_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_int64_data())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 58, input, this->mutable_int64_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // optional string name = 8;
      case 8: {
        if (tag == 66) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.TensorProto.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_raw_data;
        break;
      }

      // optional bytes raw_data = 9;
      case 9: {
        if (tag == 74) {
         parse_raw_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_double_data;
        break;
      }

      // repeated double double_data = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_double_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_data())));
        } else if (tag == 81) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 82, input, this->mutable_double_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_uint64_data;
        break;
      }

      // repeated uint64 uint64_data = 11 [packed = true];
      case 11: {
        if (tag == 90) {
         parse_uint64_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uint64_data())));
        } else if (tag == 88) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 90, input, this->mutable_uint64_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_doc_string;
        break;
      }

      // optional string doc_string = 12;
      case 12: {
        if (tag == 98) {
         parse_doc_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->doc_string().data(), this->doc_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.TensorProto.doc_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_external_data;
        break;
      }

      // repeated .onnx.StringStringEntryProto external_data = 13;
      case 13: {
        if (tag == 106) {
         parse_external_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_external_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_external_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_external_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(112)) goto parse_data_location;
        break;
      }

      // optional .onnx.TensorProto.DataLocation data_location = 14;
      case 14: {
        if (tag == 112) {
         parse_data_location:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_location(static_cast< ::onnx::TensorProto_DataLocation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TensorProto)
  return false;
#undef DO_
}

void TensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TensorProto)
  // repeated int64 dims = 1;
  if (this->dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dims(i), output);
  }

  // optional int32 data_type = 2;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data_type(), output);
  }

  // optional .onnx.TensorProto.Segment segment = 3;
  if (this->has_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->segment_, output);
  }

  // repeated float float_data = 4 [packed = true];
  if (this->float_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_float_data_cached_byte_size_);
  }
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->float_data(i), output);
  }

  // repeated int32 int32_data = 5 [packed = true];
  if (this->int32_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int32_data_cached_byte_size_);
  }
  for (int i = 0; i < this->int32_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int32_data(i), output);
  }

  // repeated bytes string_data = 6;
  for (int i = 0; i < this->string_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->string_data(i), output);
  }

  // repeated int64 int64_data = 7 [packed = true];
  if (this->int64_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int64_data_cached_byte_size_);
  }
  for (int i = 0; i < this->int64_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->int64_data(i), output);
  }

  // optional string name = 8;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.TensorProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // optional bytes raw_data = 9;
  if (this->raw_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->raw_data(), output);
  }

  // repeated double double_data = 10 [packed = true];
  if (this->double_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_data_cached_byte_size_);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_data(i), output);
  }

  // repeated uint64 uint64_data = 11 [packed = true];
  if (this->uint64_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_uint64_data_cached_byte_size_);
  }
  for (int i = 0; i < this->uint64_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->uint64_data(i), output);
  }

  // optional string doc_string = 12;
  if (this->doc_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->doc_string().data(), this->doc_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.TensorProto.doc_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->doc_string(), output);
  }

  // repeated .onnx.StringStringEntryProto external_data = 13;
  for (unsigned int i = 0, n = this->external_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->external_data(i), output);
  }

  // optional .onnx.TensorProto.DataLocation data_location = 14;
  if (this->data_location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->data_location(), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TensorProto)
}

size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorProto)
  size_t total_size = 0;

  // optional int32 data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data_type());
  }

  // optional .onnx.TensorProto.Segment segment = 3;
  if (this->has_segment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->segment_);
  }

  // optional string name = 8;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string doc_string = 12;
  if (this->doc_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_string());
  }

  // optional bytes raw_data = 9;
  if (this->raw_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_data());
  }

  // optional .onnx.TensorProto.DataLocation data_location = 14;
  if (this->data_location() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_location());
  }

  // repeated int64 dims = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->dims_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dims(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dims_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float float_data = 4 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->float_data_size();
    data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _float_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 int32_data = 5 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->int32_data_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32_data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int32_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes string_data = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_data_size());
  for (int i = 0; i < this->string_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->string_data(i));
  }

  // repeated int64 int64_data = 7 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->int64_data_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->int64_data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int64_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .onnx.StringStringEntryProto external_data = 13;
  {
    unsigned int count = this->external_data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->external_data(i));
    }
  }

  // repeated double double_data = 10 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->double_data_size();
    data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 uint64_data = 11 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->uint64_data_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uint64_data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _uint64_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorProto*>(&from));
}

void TensorProto::MergeFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TensorProto::UnsafeMergeFrom(const TensorProto& from) {
  GOOGLE_DCHECK(&from != this);
  dims_.UnsafeMergeFrom(from.dims_);
  float_data_.UnsafeMergeFrom(from.float_data_);
  int32_data_.UnsafeMergeFrom(from.int32_data_);
  string_data_.UnsafeMergeFrom(from.string_data_);
  int64_data_.UnsafeMergeFrom(from.int64_data_);
  external_data_.MergeFrom(from.external_data_);
  double_data_.UnsafeMergeFrom(from.double_data_);
  uint64_data_.UnsafeMergeFrom(from.uint64_data_);
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.has_segment()) {
    mutable_segment()->::onnx::TensorProto_Segment::MergeFrom(from.segment());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.doc_string().size() > 0) {

    doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
  }
  if (from.raw_data().size() > 0) {

    raw_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_data_);
  }
  if (from.data_location() != 0) {
    set_data_location(from.data_location());
  }
}

void TensorProto::CopyFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TensorProto::IsInitialized() const {

  return true;
}

void TensorProto::Swap(TensorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorProto::InternalSwap(TensorProto* other) {
  dims_.UnsafeArenaSwap(&other->dims_);
  std::swap(data_type_, other->data_type_);
  std::swap(segment_, other->segment_);
  float_data_.UnsafeArenaSwap(&other->float_data_);
  int32_data_.UnsafeArenaSwap(&other->int32_data_);
  string_data_.UnsafeArenaSwap(&other->string_data_);
  int64_data_.UnsafeArenaSwap(&other->int64_data_);
  name_.Swap(&other->name_);
  doc_string_.Swap(&other->doc_string_);
  raw_data_.Swap(&other->raw_data_);
  external_data_.UnsafeArenaSwap(&other->external_data_);
  std::swap(data_location_, other->data_location_);
  double_data_.UnsafeArenaSwap(&other->double_data_);
  uint64_data_.UnsafeArenaSwap(&other->uint64_data_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorProto::GetTypeName() const {
  return "onnx.TensorProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorProto_Segment

// optional int64 begin = 1;
void TensorProto_Segment::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TensorProto_Segment::begin() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.Segment.begin)
  return begin_;
}
void TensorProto_Segment::set_begin(::google::protobuf::int64 value) {
  
  begin_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.Segment.begin)
}

// optional int64 end = 2;
void TensorProto_Segment::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TensorProto_Segment::end() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.Segment.end)
  return end_;
}
void TensorProto_Segment::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.Segment.end)
}

inline const TensorProto_Segment* TensorProto_Segment::internal_default_instance() {
  return &TensorProto_Segment_default_instance_.get();
}
// -------------------------------------------------------------------

// TensorProto

// repeated int64 dims = 1;
int TensorProto::dims_size() const {
  return dims_.size();
}
void TensorProto::clear_dims() {
  dims_.Clear();
}
::google::protobuf::int64 TensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.dims)
  return dims_.Get(index);
}
void TensorProto::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.dims)
}
void TensorProto::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::dims() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.dims)
  return dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.dims)
  return &dims_;
}

// optional int32 data_type = 2;
void TensorProto::clear_data_type() {
  data_type_ = 0;
}
::google::protobuf::int32 TensorProto::data_type() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.data_type)
  return data_type_;
}
void TensorProto::set_data_type(::google::protobuf::int32 value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.data_type)
}

// optional .onnx.TensorProto.Segment segment = 3;
bool TensorProto::has_segment() const {
  return this != internal_default_instance() && segment_ != NULL;
}
void TensorProto::clear_segment() {
  if (GetArenaNoVirtual() == NULL && segment_ != NULL) delete segment_;
  segment_ = NULL;
}
const ::onnx::TensorProto_Segment& TensorProto::segment() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.segment)
  return segment_ != NULL ? *segment_
                         : *::onnx::TensorProto_Segment::internal_default_instance();
}
::onnx::TensorProto_Segment* TensorProto::mutable_segment() {
  
  if (segment_ == NULL) {
    segment_ = new ::onnx::TensorProto_Segment;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.segment)
  return segment_;
}
::onnx::TensorProto_Segment* TensorProto::release_segment() {
  // @@protoc_insertion_point(field_release:onnx.TensorProto.segment)
  
  ::onnx::TensorProto_Segment* temp = segment_;
  segment_ = NULL;
  return temp;
}
void TensorProto::set_allocated_segment(::onnx::TensorProto_Segment* segment) {
  delete segment_;
  segment_ = segment;
  if (segment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.segment)
}

// repeated float float_data = 4 [packed = true];
int TensorProto::float_data_size() const {
  return float_data_.size();
}
void TensorProto::clear_float_data() {
  float_data_.Clear();
}
float TensorProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.float_data)
  return float_data_.Get(index);
}
void TensorProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.float_data)
}
void TensorProto::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.float_data)
}
const ::google::protobuf::RepeatedField< float >&
TensorProto::float_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.float_data)
  return float_data_;
}
::google::protobuf::RepeatedField< float >*
TensorProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.float_data)
  return &float_data_;
}

// repeated int32 int32_data = 5 [packed = true];
int TensorProto::int32_data_size() const {
  return int32_data_.size();
}
void TensorProto::clear_int32_data() {
  int32_data_.Clear();
}
::google::protobuf::int32 TensorProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.int32_data)
  return int32_data_.Get(index);
}
void TensorProto::set_int32_data(int index, ::google::protobuf::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.int32_data)
}
void TensorProto::add_int32_data(::google::protobuf::int32 value) {
  int32_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.int32_data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::int32_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.int32_data)
  return int32_data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.int32_data)
  return &int32_data_;
}

// repeated bytes string_data = 6;
int TensorProto::string_data_size() const {
  return string_data_.size();
}
void TensorProto::clear_string_data() {
  string_data_.Clear();
}
const ::std::string& TensorProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.string_data)
  return string_data_.Get(index);
}
::std::string* TensorProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.string_data)
  return string_data_.Mutable(index);
}
void TensorProto::set_string_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.TensorProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
void TensorProto::set_string_data(int index, const char* value) {
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.string_data)
}
void TensorProto::set_string_data(int index, const void* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.string_data)
}
::std::string* TensorProto::add_string_data() {
  // @@protoc_insertion_point(field_add_mutable:onnx.TensorProto.string_data)
  return string_data_.Add();
}
void TensorProto::add_string_data(const ::std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.string_data)
}
void TensorProto::add_string_data(const char* value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.TensorProto.string_data)
}
void TensorProto::add_string_data(const void* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.TensorProto.string_data)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TensorProto::string_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.string_data)
  return string_data_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TensorProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.string_data)
  return &string_data_;
}

// repeated int64 int64_data = 7 [packed = true];
int TensorProto::int64_data_size() const {
  return int64_data_.size();
}
void TensorProto::clear_int64_data() {
  int64_data_.Clear();
}
::google::protobuf::int64 TensorProto::int64_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.int64_data)
  return int64_data_.Get(index);
}
void TensorProto::set_int64_data(int index, ::google::protobuf::int64 value) {
  int64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.int64_data)
}
void TensorProto::add_int64_data(::google::protobuf::int64 value) {
  int64_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.int64_data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::int64_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.int64_data)
  return int64_data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_int64_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.int64_data)
  return &int64_data_;
}

// optional string name = 8;
void TensorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TensorProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.name)
}
void TensorProto::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.name)
}
void TensorProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.name)
}
::std::string* TensorProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.TensorProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.name)
}

// optional string doc_string = 12;
void TensorProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TensorProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.doc_string)
  return doc_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.doc_string)
}
void TensorProto::set_doc_string(const char* value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.doc_string)
}
void TensorProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.doc_string)
}
::std::string* TensorProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.TensorProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.doc_string)
}

// optional bytes raw_data = 9;
void TensorProto::clear_raw_data() {
  raw_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TensorProto::raw_data() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.raw_data)
  return raw_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorProto::set_raw_data(const ::std::string& value) {
  
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.raw_data)
}
void TensorProto::set_raw_data(const char* value) {
  
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.raw_data)
}
void TensorProto::set_raw_data(const void* value, size_t size) {
  
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.raw_data)
}
::std::string* TensorProto::mutable_raw_data() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.raw_data)
  return raw_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorProto::release_raw_data() {
  // @@protoc_insertion_point(field_release:onnx.TensorProto.raw_data)
  
  return raw_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorProto::set_allocated_raw_data(::std::string* raw_data) {
  if (raw_data != NULL) {
    
  } else {
    
  }
  raw_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_data);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.raw_data)
}

// repeated .onnx.StringStringEntryProto external_data = 13;
int TensorProto::external_data_size() const {
  return external_data_.size();
}
void TensorProto::clear_external_data() {
  external_data_.Clear();
}
const ::onnx::StringStringEntryProto& TensorProto::external_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.external_data)
  return external_data_.Get(index);
}
::onnx::StringStringEntryProto* TensorProto::mutable_external_data(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.external_data)
  return external_data_.Mutable(index);
}
::onnx::StringStringEntryProto* TensorProto::add_external_data() {
  // @@protoc_insertion_point(field_add:onnx.TensorProto.external_data)
  return external_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
TensorProto::mutable_external_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.external_data)
  return &external_data_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
TensorProto::external_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.external_data)
  return external_data_;
}

// optional .onnx.TensorProto.DataLocation data_location = 14;
void TensorProto::clear_data_location() {
  data_location_ = 0;
}
::onnx::TensorProto_DataLocation TensorProto::data_location() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.data_location)
  return static_cast< ::onnx::TensorProto_DataLocation >(data_location_);
}
void TensorProto::set_data_location(::onnx::TensorProto_DataLocation value) {
  
  data_location_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.data_location)
}

// repeated double double_data = 10 [packed = true];
int TensorProto::double_data_size() const {
  return double_data_.size();
}
void TensorProto::clear_double_data() {
  double_data_.Clear();
}
double TensorProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.double_data)
  return double_data_.Get(index);
}
void TensorProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.double_data)
}
void TensorProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.double_data)
}
const ::google::protobuf::RepeatedField< double >&
TensorProto::double_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.double_data)
  return double_data_;
}
::google::protobuf::RepeatedField< double >*
TensorProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.double_data)
  return &double_data_;
}

// repeated uint64 uint64_data = 11 [packed = true];
int TensorProto::uint64_data_size() const {
  return uint64_data_.size();
}
void TensorProto::clear_uint64_data() {
  uint64_data_.Clear();
}
::google::protobuf::uint64 TensorProto::uint64_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.uint64_data)
  return uint64_data_.Get(index);
}
void TensorProto::set_uint64_data(int index, ::google::protobuf::uint64 value) {
  uint64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.uint64_data)
}
void TensorProto::add_uint64_data(::google::protobuf::uint64 value) {
  uint64_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.uint64_data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TensorProto::uint64_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.uint64_data)
  return uint64_data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TensorProto::mutable_uint64_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.uint64_data)
  return &uint64_data_;
}

inline const TensorProto* TensorProto::internal_default_instance() {
  return &TensorProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseTensorProto::kValuesFieldNumber;
const int SparseTensorProto::kIndicesFieldNumber;
const int SparseTensorProto::kDimsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseTensorProto::SparseTensorProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.SparseTensorProto)
}

void SparseTensorProto::InitAsDefaultInstance() {
  values_ = const_cast< ::onnx::TensorProto*>(
      ::onnx::TensorProto::internal_default_instance());
  indices_ = const_cast< ::onnx::TensorProto*>(
      ::onnx::TensorProto::internal_default_instance());
}

SparseTensorProto::SparseTensorProto(const SparseTensorProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.SparseTensorProto)
}

void SparseTensorProto::SharedCtor() {
  values_ = NULL;
  indices_ = NULL;
  _cached_size_ = 0;
}

SparseTensorProto::~SparseTensorProto() {
  // @@protoc_insertion_point(destructor:onnx.SparseTensorProto)
  SharedDtor();
}

void SparseTensorProto::SharedDtor() {
  if (this != &SparseTensorProto_default_instance_.get()) {
    delete values_;
    delete indices_;
  }
}

void SparseTensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SparseTensorProto& SparseTensorProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SparseTensorProto> SparseTensorProto_default_instance_;

SparseTensorProto* SparseTensorProto::New(::google::protobuf::Arena* arena) const {
  SparseTensorProto* n = new SparseTensorProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparseTensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.SparseTensorProto)
  if (GetArenaNoVirtual() == NULL && values_ != NULL) delete values_;
  values_ = NULL;
  if (GetArenaNoVirtual() == NULL && indices_ != NULL) delete indices_;
  indices_ = NULL;
  dims_.Clear();
}

bool SparseTensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.SparseTensorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .onnx.TensorProto values = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_indices;
        break;
      }

      // optional .onnx.TensorProto indices = 2;
      case 2: {
        if (tag == 18) {
         parse_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dims;
        break;
      }

      // repeated int64 dims = 3;
      case 3: {
        if (tag == 26) {
         parse_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.SparseTensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.SparseTensorProto)
  return false;
#undef DO_
}

void SparseTensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.SparseTensorProto)
  // optional .onnx.TensorProto values = 1;
  if (this->has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->values_, output);
  }

  // optional .onnx.TensorProto indices = 2;
  if (this->has_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->indices_, output);
  }

  // repeated int64 dims = 3;
  if (this->dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dims(i), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.SparseTensorProto)
}

size_t SparseTensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.SparseTensorProto)
  size_t total_size = 0;

  // optional .onnx.TensorProto values = 1;
  if (this->has_values()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->values_);
  }

  // optional .onnx.TensorProto indices = 2;
  if (this->has_indices()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->indices_);
  }

  // repeated int64 dims = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->dims_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dims(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dims_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseTensorProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SparseTensorProto*>(&from));
}

void SparseTensorProto::MergeFrom(const SparseTensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.SparseTensorProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SparseTensorProto::UnsafeMergeFrom(const SparseTensorProto& from) {
  GOOGLE_DCHECK(&from != this);
  dims_.UnsafeMergeFrom(from.dims_);
  if (from.has_values()) {
    mutable_values()->::onnx::TensorProto::MergeFrom(from.values());
  }
  if (from.has_indices()) {
    mutable_indices()->::onnx::TensorProto::MergeFrom(from.indices());
  }
}

void SparseTensorProto::CopyFrom(const SparseTensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.SparseTensorProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SparseTensorProto::IsInitialized() const {

  return true;
}

void SparseTensorProto::Swap(SparseTensorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparseTensorProto::InternalSwap(SparseTensorProto* other) {
  std::swap(values_, other->values_);
  std::swap(indices_, other->indices_);
  dims_.UnsafeArenaSwap(&other->dims_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SparseTensorProto::GetTypeName() const {
  return "onnx.SparseTensorProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparseTensorProto

// optional .onnx.TensorProto values = 1;
bool SparseTensorProto::has_values() const {
  return this != internal_default_instance() && values_ != NULL;
}
void SparseTensorProto::clear_values() {
  if (GetArenaNoVirtual() == NULL && values_ != NULL) delete values_;
  values_ = NULL;
}
const ::onnx::TensorProto& SparseTensorProto::values() const {
  // @@protoc_insertion_point(field_get:onnx.SparseTensorProto.values)
  return values_ != NULL ? *values_
                         : *::onnx::TensorProto::internal_default_instance();
}
::onnx::TensorProto* SparseTensorProto::mutable_values() {
  
  if (values_ == NULL) {
    values_ = new ::onnx::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.SparseTensorProto.values)
  return values_;
}
::onnx::TensorProto* SparseTensorProto::release_values() {
  // @@protoc_insertion_point(field_release:onnx.SparseTensorProto.values)
  
  ::onnx::TensorProto* temp = values_;
  values_ = NULL;
  return temp;
}
void SparseTensorProto::set_allocated_values(::onnx::TensorProto* values) {
  delete values_;
  values_ = values;
  if (values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.SparseTensorProto.values)
}

// optional .onnx.TensorProto indices = 2;
bool SparseTensorProto::has_indices() const {
  return this != internal_default_instance() && indices_ != NULL;
}
void SparseTensorProto::clear_indices() {
  if (GetArenaNoVirtual() == NULL && indices_ != NULL) delete indices_;
  indices_ = NULL;
}
const ::onnx::TensorProto& SparseTensorProto::indices() const {
  // @@protoc_insertion_point(field_get:onnx.SparseTensorProto.indices)
  return indices_ != NULL ? *indices_
                         : *::onnx::TensorProto::internal_default_instance();
}
::onnx::TensorProto* SparseTensorProto::mutable_indices() {
  
  if (indices_ == NULL) {
    indices_ = new ::onnx::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.SparseTensorProto.indices)
  return indices_;
}
::onnx::TensorProto* SparseTensorProto::release_indices() {
  // @@protoc_insertion_point(field_release:onnx.SparseTensorProto.indices)
  
  ::onnx::TensorProto* temp = indices_;
  indices_ = NULL;
  return temp;
}
void SparseTensorProto::set_allocated_indices(::onnx::TensorProto* indices) {
  delete indices_;
  indices_ = indices;
  if (indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.SparseTensorProto.indices)
}

// repeated int64 dims = 3;
int SparseTensorProto::dims_size() const {
  return dims_.size();
}
void SparseTensorProto::clear_dims() {
  dims_.Clear();
}
::google::protobuf::int64 SparseTensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SparseTensorProto.dims)
  return dims_.Get(index);
}
void SparseTensorProto::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.SparseTensorProto.dims)
}
void SparseTensorProto::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.SparseTensorProto.dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SparseTensorProto::dims() const {
  // @@protoc_insertion_point(field_list:onnx.SparseTensorProto.dims)
  return dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SparseTensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SparseTensorProto.dims)
  return &dims_;
}

inline const SparseTensorProto* SparseTensorProto::internal_default_instance() {
  return &SparseTensorProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorShapeProto_Dimension::kDimValueFieldNumber;
const int TensorShapeProto_Dimension::kDimParamFieldNumber;
const int TensorShapeProto_Dimension::kDenotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorShapeProto_Dimension::TensorShapeProto_Dimension()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TensorShapeProto.Dimension)
}

void TensorShapeProto_Dimension::InitAsDefaultInstance() {
}

TensorShapeProto_Dimension::TensorShapeProto_Dimension(const TensorShapeProto_Dimension& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TensorShapeProto.Dimension)
}

void TensorShapeProto_Dimension::SharedCtor() {
  denotation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
  _cached_size_ = 0;
}

TensorShapeProto_Dimension::~TensorShapeProto_Dimension() {
  // @@protoc_insertion_point(destructor:onnx.TensorShapeProto.Dimension)
  SharedDtor();
}

void TensorShapeProto_Dimension::SharedDtor() {
  denotation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void TensorShapeProto_Dimension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorShapeProto_Dimension& TensorShapeProto_Dimension::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TensorShapeProto_Dimension> TensorShapeProto_Dimension_default_instance_;

TensorShapeProto_Dimension* TensorShapeProto_Dimension::New(::google::protobuf::Arena* arena) const {
  TensorShapeProto_Dimension* n = new TensorShapeProto_Dimension;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorShapeProto_Dimension::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:onnx.TensorShapeProto.Dimension)
  switch (value_case()) {
    case kDimValue: {
      // No need to clear
      break;
    }
    case kDimParam: {
      value_.dim_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void TensorShapeProto_Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorShapeProto.Dimension)
  denotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_value();
}

bool TensorShapeProto_Dimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TensorShapeProto.Dimension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 dim_value = 1;
      case 1: {
        if (tag == 8) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.dim_value_)));
          set_has_dim_value();
        } else {
          goto handle_unusual;
        }
        goto after_dim_param;
        break;
      }

      // optional string dim_param = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dim_param()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dim_param().data(), this->dim_param().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.TensorShapeProto.Dimension.dim_param"));
        } else {
          goto handle_unusual;
        }
       after_dim_param:
        if (input->ExpectTag(26)) goto parse_denotation;
        break;
      }

      // optional string denotation = 3;
      case 3: {
        if (tag == 26) {
         parse_denotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_denotation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->denotation().data(), this->denotation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.TensorShapeProto.Dimension.denotation"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TensorShapeProto.Dimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TensorShapeProto.Dimension)
  return false;
#undef DO_
}

void TensorShapeProto_Dimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TensorShapeProto.Dimension)
  // optional int64 dim_value = 1;
  if (has_dim_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dim_value(), output);
  }

  // optional string dim_param = 2;
  if (has_dim_param()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dim_param().data(), this->dim_param().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.TensorShapeProto.Dimension.dim_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dim_param(), output);
  }

  // optional string denotation = 3;
  if (this->denotation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->denotation().data(), this->denotation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.TensorShapeProto.Dimension.denotation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->denotation(), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TensorShapeProto.Dimension)
}

size_t TensorShapeProto_Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorShapeProto.Dimension)
  size_t total_size = 0;

  // optional string denotation = 3;
  if (this->denotation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->denotation());
  }

  switch (value_case()) {
    // optional int64 dim_value = 1;
    case kDimValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dim_value());
      break;
    }
    // optional string dim_param = 2;
    case kDimParam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dim_param());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorShapeProto_Dimension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorShapeProto_Dimension*>(&from));
}

void TensorShapeProto_Dimension::MergeFrom(const TensorShapeProto_Dimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorShapeProto.Dimension)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TensorShapeProto_Dimension::UnsafeMergeFrom(const TensorShapeProto_Dimension& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.value_case()) {
    case kDimValue: {
      set_dim_value(from.dim_value());
      break;
    }
    case kDimParam: {
      set_dim_param(from.dim_param());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from.denotation().size() > 0) {

    denotation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denotation_);
  }
}

void TensorShapeProto_Dimension::CopyFrom(const TensorShapeProto_Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorShapeProto.Dimension)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TensorShapeProto_Dimension::IsInitialized() const {

  return true;
}

void TensorShapeProto_Dimension::Swap(TensorShapeProto_Dimension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorShapeProto_Dimension::InternalSwap(TensorShapeProto_Dimension* other) {
  denotation_.Swap(&other->denotation_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorShapeProto_Dimension::GetTypeName() const {
  return "onnx.TensorShapeProto.Dimension";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorShapeProto::kDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorShapeProto::TensorShapeProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TensorShapeProto)
}

void TensorShapeProto::InitAsDefaultInstance() {
}

TensorShapeProto::TensorShapeProto(const TensorShapeProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TensorShapeProto)
}

void TensorShapeProto::SharedCtor() {
  _cached_size_ = 0;
}

TensorShapeProto::~TensorShapeProto() {
  // @@protoc_insertion_point(destructor:onnx.TensorShapeProto)
  SharedDtor();
}

void TensorShapeProto::SharedDtor() {
}

void TensorShapeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorShapeProto& TensorShapeProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TensorShapeProto> TensorShapeProto_default_instance_;

TensorShapeProto* TensorShapeProto::New(::google::protobuf::Arena* arena) const {
  TensorShapeProto* n = new TensorShapeProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorShapeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorShapeProto)
  dim_.Clear();
}

bool TensorShapeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TensorShapeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .onnx.TensorShapeProto.Dimension dim = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_dim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_dim;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TensorShapeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TensorShapeProto)
  return false;
#undef DO_
}

void TensorShapeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TensorShapeProto)
  // repeated .onnx.TensorShapeProto.Dimension dim = 1;
  for (unsigned int i = 0, n = this->dim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->dim(i), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TensorShapeProto)
}

size_t TensorShapeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorShapeProto)
  size_t total_size = 0;

  // repeated .onnx.TensorShapeProto.Dimension dim = 1;
  {
    unsigned int count = this->dim_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dim(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorShapeProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorShapeProto*>(&from));
}

void TensorShapeProto::MergeFrom(const TensorShapeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorShapeProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TensorShapeProto::UnsafeMergeFrom(const TensorShapeProto& from) {
  GOOGLE_DCHECK(&from != this);
  dim_.MergeFrom(from.dim_);
}

void TensorShapeProto::CopyFrom(const TensorShapeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorShapeProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TensorShapeProto::IsInitialized() const {

  return true;
}

void TensorShapeProto::Swap(TensorShapeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorShapeProto::InternalSwap(TensorShapeProto* other) {
  dim_.UnsafeArenaSwap(&other->dim_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorShapeProto::GetTypeName() const {
  return "onnx.TensorShapeProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorShapeProto_Dimension

// optional int64 dim_value = 1;
bool TensorShapeProto_Dimension::has_dim_value() const {
  return value_case() == kDimValue;
}
void TensorShapeProto_Dimension::set_has_dim_value() {
  _oneof_case_[0] = kDimValue;
}
void TensorShapeProto_Dimension::clear_dim_value() {
  if (has_dim_value()) {
    value_.dim_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::int64 TensorShapeProto_Dimension::dim_value() const {
  // @@protoc_insertion_point(field_get:onnx.TensorShapeProto.Dimension.dim_value)
  if (has_dim_value()) {
    return value_.dim_value_;
  }
  return GOOGLE_LONGLONG(0);
}
void TensorShapeProto_Dimension::set_dim_value(::google::protobuf::int64 value) {
  if (!has_dim_value()) {
    clear_value();
    set_has_dim_value();
  }
  value_.dim_value_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorShapeProto.Dimension.dim_value)
}

// optional string dim_param = 2;
bool TensorShapeProto_Dimension::has_dim_param() const {
  return value_case() == kDimParam;
}
void TensorShapeProto_Dimension::set_has_dim_param() {
  _oneof_case_[0] = kDimParam;
}
void TensorShapeProto_Dimension::clear_dim_param() {
  if (has_dim_param()) {
    value_.dim_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
const ::std::string& TensorShapeProto_Dimension::dim_param() const {
  // @@protoc_insertion_point(field_get:onnx.TensorShapeProto.Dimension.dim_param)
  if (has_dim_param()) {
    return value_.dim_param_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TensorShapeProto_Dimension::set_dim_param(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.TensorShapeProto.Dimension.dim_param)
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorShapeProto.Dimension.dim_param)
}
void TensorShapeProto_Dimension::set_dim_param(const char* value) {
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorShapeProto.Dimension.dim_param)
}
void TensorShapeProto_Dimension::set_dim_param(const char* value, size_t size) {
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorShapeProto.Dimension.dim_param)
}
::std::string* TensorShapeProto_Dimension::mutable_dim_param() {
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:onnx.TensorShapeProto.Dimension.dim_param)
  return value_.dim_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorShapeProto_Dimension::release_dim_param() {
  // @@protoc_insertion_point(field_release:onnx.TensorShapeProto.Dimension.dim_param)
  if (has_dim_param()) {
    clear_has_value();
    return value_.dim_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TensorShapeProto_Dimension::set_allocated_dim_param(::std::string* dim_param) {
  if (!has_dim_param()) {
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (dim_param != NULL) {
    set_has_dim_param();
    value_.dim_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        dim_param);
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorShapeProto.Dimension.dim_param)
}

// optional string denotation = 3;
void TensorShapeProto_Dimension::clear_denotation() {
  denotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TensorShapeProto_Dimension::denotation() const {
  // @@protoc_insertion_point(field_get:onnx.TensorShapeProto.Dimension.denotation)
  return denotation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorShapeProto_Dimension::set_denotation(const ::std::string& value) {
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorShapeProto.Dimension.denotation)
}
void TensorShapeProto_Dimension::set_denotation(const char* value) {
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorShapeProto.Dimension.denotation)
}
void TensorShapeProto_Dimension::set_denotation(const char* value, size_t size) {
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorShapeProto.Dimension.denotation)
}
::std::string* TensorShapeProto_Dimension::mutable_denotation() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TensorShapeProto.Dimension.denotation)
  return denotation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorShapeProto_Dimension::release_denotation() {
  // @@protoc_insertion_point(field_release:onnx.TensorShapeProto.Dimension.denotation)
  
  return denotation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorShapeProto_Dimension::set_allocated_denotation(::std::string* denotation) {
  if (denotation != NULL) {
    
  } else {
    
  }
  denotation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), denotation);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorShapeProto.Dimension.denotation)
}

bool TensorShapeProto_Dimension::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void TensorShapeProto_Dimension::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
TensorShapeProto_Dimension::ValueCase TensorShapeProto_Dimension::value_case() const {
  return TensorShapeProto_Dimension::ValueCase(_oneof_case_[0]);
}
inline const TensorShapeProto_Dimension* TensorShapeProto_Dimension::internal_default_instance() {
  return &TensorShapeProto_Dimension_default_instance_.get();
}
// -------------------------------------------------------------------

// TensorShapeProto

// repeated .onnx.TensorShapeProto.Dimension dim = 1;
int TensorShapeProto::dim_size() const {
  return dim_.size();
}
void TensorShapeProto::clear_dim() {
  dim_.Clear();
}
const ::onnx::TensorShapeProto_Dimension& TensorShapeProto::dim(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorShapeProto.dim)
  return dim_.Get(index);
}
::onnx::TensorShapeProto_Dimension* TensorShapeProto::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorShapeProto.dim)
  return dim_.Mutable(index);
}
::onnx::TensorShapeProto_Dimension* TensorShapeProto::add_dim() {
  // @@protoc_insertion_point(field_add:onnx.TensorShapeProto.dim)
  return dim_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension >*
TensorShapeProto::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorShapeProto.dim)
  return &dim_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension >&
TensorShapeProto::dim() const {
  // @@protoc_insertion_point(field_list:onnx.TensorShapeProto.dim)
  return dim_;
}

inline const TensorShapeProto* TensorShapeProto::internal_default_instance() {
  return &TensorShapeProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeProto_Tensor::kElemTypeFieldNumber;
const int TypeProto_Tensor::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeProto_Tensor::TypeProto_Tensor()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TypeProto.Tensor)
}

void TypeProto_Tensor::InitAsDefaultInstance() {
  shape_ = const_cast< ::onnx::TensorShapeProto*>(
      ::onnx::TensorShapeProto::internal_default_instance());
}

TypeProto_Tensor::TypeProto_Tensor(const TypeProto_Tensor& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Tensor)
}

void TypeProto_Tensor::SharedCtor() {
  shape_ = NULL;
  elem_type_ = 0;
  _cached_size_ = 0;
}

TypeProto_Tensor::~TypeProto_Tensor() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Tensor)
  SharedDtor();
}

void TypeProto_Tensor::SharedDtor() {
  if (this != &TypeProto_Tensor_default_instance_.get()) {
    delete shape_;
  }
}

void TypeProto_Tensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TypeProto_Tensor& TypeProto_Tensor::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TypeProto_Tensor> TypeProto_Tensor_default_instance_;

TypeProto_Tensor* TypeProto_Tensor::New(::google::protobuf::Arena* arena) const {
  TypeProto_Tensor* n = new TypeProto_Tensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypeProto_Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Tensor)
  elem_type_ = 0;
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}

bool TypeProto_Tensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TypeProto.Tensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 elem_type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elem_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shape;
        break;
      }

      // optional .onnx.TensorShapeProto shape = 2;
      case 2: {
        if (tag == 18) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TypeProto.Tensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TypeProto.Tensor)
  return false;
#undef DO_
}

void TypeProto_Tensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TypeProto.Tensor)
  // optional int32 elem_type = 1;
  if (this->elem_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->elem_type(), output);
  }

  // optional .onnx.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->shape_, output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TypeProto.Tensor)
}

size_t TypeProto_Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Tensor)
  size_t total_size = 0;

  // optional int32 elem_type = 1;
  if (this->elem_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->elem_type());
  }

  // optional .onnx.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeProto_Tensor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TypeProto_Tensor*>(&from));
}

void TypeProto_Tensor::MergeFrom(const TypeProto_Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Tensor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TypeProto_Tensor::UnsafeMergeFrom(const TypeProto_Tensor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.elem_type() != 0) {
    set_elem_type(from.elem_type());
  }
  if (from.has_shape()) {
    mutable_shape()->::onnx::TensorShapeProto::MergeFrom(from.shape());
  }
}

void TypeProto_Tensor::CopyFrom(const TypeProto_Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Tensor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TypeProto_Tensor::IsInitialized() const {

  return true;
}

void TypeProto_Tensor::Swap(TypeProto_Tensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeProto_Tensor::InternalSwap(TypeProto_Tensor* other) {
  std::swap(elem_type_, other->elem_type_);
  std::swap(shape_, other->shape_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TypeProto_Tensor::GetTypeName() const {
  return "onnx.TypeProto.Tensor";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeProto_Sequence::kElemTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeProto_Sequence::TypeProto_Sequence()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TypeProto.Sequence)
}

void TypeProto_Sequence::InitAsDefaultInstance() {
  elem_type_ = const_cast< ::onnx::TypeProto*>(
      ::onnx::TypeProto::internal_default_instance());
}

TypeProto_Sequence::TypeProto_Sequence(const TypeProto_Sequence& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Sequence)
}

void TypeProto_Sequence::SharedCtor() {
  elem_type_ = NULL;
  _cached_size_ = 0;
}

TypeProto_Sequence::~TypeProto_Sequence() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Sequence)
  SharedDtor();
}

void TypeProto_Sequence::SharedDtor() {
  if (this != &TypeProto_Sequence_default_instance_.get()) {
    delete elem_type_;
  }
}

void TypeProto_Sequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TypeProto_Sequence& TypeProto_Sequence::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TypeProto_Sequence> TypeProto_Sequence_default_instance_;

TypeProto_Sequence* TypeProto_Sequence::New(::google::protobuf::Arena* arena) const {
  TypeProto_Sequence* n = new TypeProto_Sequence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypeProto_Sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Sequence)
  if (GetArenaNoVirtual() == NULL && elem_type_ != NULL) delete elem_type_;
  elem_type_ = NULL;
}

bool TypeProto_Sequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TypeProto.Sequence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .onnx.TypeProto elem_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elem_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TypeProto.Sequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TypeProto.Sequence)
  return false;
#undef DO_
}

void TypeProto_Sequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TypeProto.Sequence)
  // optional .onnx.TypeProto elem_type = 1;
  if (this->has_elem_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->elem_type_, output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TypeProto.Sequence)
}

size_t TypeProto_Sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Sequence)
  size_t total_size = 0;

  // optional .onnx.TypeProto elem_type = 1;
  if (this->has_elem_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->elem_type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeProto_Sequence::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TypeProto_Sequence*>(&from));
}

void TypeProto_Sequence::MergeFrom(const TypeProto_Sequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Sequence)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TypeProto_Sequence::UnsafeMergeFrom(const TypeProto_Sequence& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_elem_type()) {
    mutable_elem_type()->::onnx::TypeProto::MergeFrom(from.elem_type());
  }
}

void TypeProto_Sequence::CopyFrom(const TypeProto_Sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Sequence)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TypeProto_Sequence::IsInitialized() const {

  return true;
}

void TypeProto_Sequence::Swap(TypeProto_Sequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeProto_Sequence::InternalSwap(TypeProto_Sequence* other) {
  std::swap(elem_type_, other->elem_type_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TypeProto_Sequence::GetTypeName() const {
  return "onnx.TypeProto.Sequence";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeProto_Map::kKeyTypeFieldNumber;
const int TypeProto_Map::kValueTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeProto_Map::TypeProto_Map()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TypeProto.Map)
}

void TypeProto_Map::InitAsDefaultInstance() {
  value_type_ = const_cast< ::onnx::TypeProto*>(
      ::onnx::TypeProto::internal_default_instance());
}

TypeProto_Map::TypeProto_Map(const TypeProto_Map& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Map)
}

void TypeProto_Map::SharedCtor() {
  value_type_ = NULL;
  key_type_ = 0;
  _cached_size_ = 0;
}

TypeProto_Map::~TypeProto_Map() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Map)
  SharedDtor();
}

void TypeProto_Map::SharedDtor() {
  if (this != &TypeProto_Map_default_instance_.get()) {
    delete value_type_;
  }
}

void TypeProto_Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TypeProto_Map& TypeProto_Map::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TypeProto_Map> TypeProto_Map_default_instance_;

TypeProto_Map* TypeProto_Map::New(::google::protobuf::Arena* arena) const {
  TypeProto_Map* n = new TypeProto_Map;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypeProto_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Map)
  key_type_ = 0;
  if (GetArenaNoVirtual() == NULL && value_type_ != NULL) delete value_type_;
  value_type_ = NULL;
}

bool TypeProto_Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TypeProto.Map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key_type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value_type;
        break;
      }

      // optional .onnx.TypeProto value_type = 2;
      case 2: {
        if (tag == 18) {
         parse_value_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TypeProto.Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TypeProto.Map)
  return false;
#undef DO_
}

void TypeProto_Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TypeProto.Map)
  // optional int32 key_type = 1;
  if (this->key_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key_type(), output);
  }

  // optional .onnx.TypeProto value_type = 2;
  if (this->has_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->value_type_, output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TypeProto.Map)
}

size_t TypeProto_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Map)
  size_t total_size = 0;

  // optional int32 key_type = 1;
  if (this->key_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key_type());
  }

  // optional .onnx.TypeProto value_type = 2;
  if (this->has_value_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeProto_Map::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TypeProto_Map*>(&from));
}

void TypeProto_Map::MergeFrom(const TypeProto_Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Map)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TypeProto_Map::UnsafeMergeFrom(const TypeProto_Map& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key_type() != 0) {
    set_key_type(from.key_type());
  }
  if (from.has_value_type()) {
    mutable_value_type()->::onnx::TypeProto::MergeFrom(from.value_type());
  }
}

void TypeProto_Map::CopyFrom(const TypeProto_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Map)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TypeProto_Map::IsInitialized() const {

  return true;
}

void TypeProto_Map::Swap(TypeProto_Map* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeProto_Map::InternalSwap(TypeProto_Map* other) {
  std::swap(key_type_, other->key_type_);
  std::swap(value_type_, other->value_type_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TypeProto_Map::GetTypeName() const {
  return "onnx.TypeProto.Map";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeProto_Optional::kElemTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeProto_Optional::TypeProto_Optional()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TypeProto.Optional)
}

void TypeProto_Optional::InitAsDefaultInstance() {
  elem_type_ = const_cast< ::onnx::TypeProto*>(
      ::onnx::TypeProto::internal_default_instance());
}

TypeProto_Optional::TypeProto_Optional(const TypeProto_Optional& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Optional)
}

void TypeProto_Optional::SharedCtor() {
  elem_type_ = NULL;
  _cached_size_ = 0;
}

TypeProto_Optional::~TypeProto_Optional() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Optional)
  SharedDtor();
}

void TypeProto_Optional::SharedDtor() {
  if (this != &TypeProto_Optional_default_instance_.get()) {
    delete elem_type_;
  }
}

void TypeProto_Optional::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TypeProto_Optional& TypeProto_Optional::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TypeProto_Optional> TypeProto_Optional_default_instance_;

TypeProto_Optional* TypeProto_Optional::New(::google::protobuf::Arena* arena) const {
  TypeProto_Optional* n = new TypeProto_Optional;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypeProto_Optional::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Optional)
  if (GetArenaNoVirtual() == NULL && elem_type_ != NULL) delete elem_type_;
  elem_type_ = NULL;
}

bool TypeProto_Optional::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TypeProto.Optional)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .onnx.TypeProto elem_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elem_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TypeProto.Optional)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TypeProto.Optional)
  return false;
#undef DO_
}

void TypeProto_Optional::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TypeProto.Optional)
  // optional .onnx.TypeProto elem_type = 1;
  if (this->has_elem_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->elem_type_, output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TypeProto.Optional)
}

size_t TypeProto_Optional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Optional)
  size_t total_size = 0;

  // optional .onnx.TypeProto elem_type = 1;
  if (this->has_elem_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->elem_type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeProto_Optional::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TypeProto_Optional*>(&from));
}

void TypeProto_Optional::MergeFrom(const TypeProto_Optional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Optional)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TypeProto_Optional::UnsafeMergeFrom(const TypeProto_Optional& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_elem_type()) {
    mutable_elem_type()->::onnx::TypeProto::MergeFrom(from.elem_type());
  }
}

void TypeProto_Optional::CopyFrom(const TypeProto_Optional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Optional)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TypeProto_Optional::IsInitialized() const {

  return true;
}

void TypeProto_Optional::Swap(TypeProto_Optional* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeProto_Optional::InternalSwap(TypeProto_Optional* other) {
  std::swap(elem_type_, other->elem_type_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TypeProto_Optional::GetTypeName() const {
  return "onnx.TypeProto.Optional";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeProto_SparseTensor::kElemTypeFieldNumber;
const int TypeProto_SparseTensor::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeProto_SparseTensor::TypeProto_SparseTensor()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TypeProto.SparseTensor)
}

void TypeProto_SparseTensor::InitAsDefaultInstance() {
  shape_ = const_cast< ::onnx::TensorShapeProto*>(
      ::onnx::TensorShapeProto::internal_default_instance());
}

TypeProto_SparseTensor::TypeProto_SparseTensor(const TypeProto_SparseTensor& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.SparseTensor)
}

void TypeProto_SparseTensor::SharedCtor() {
  shape_ = NULL;
  elem_type_ = 0;
  _cached_size_ = 0;
}

TypeProto_SparseTensor::~TypeProto_SparseTensor() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.SparseTensor)
  SharedDtor();
}

void TypeProto_SparseTensor::SharedDtor() {
  if (this != &TypeProto_SparseTensor_default_instance_.get()) {
    delete shape_;
  }
}

void TypeProto_SparseTensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TypeProto_SparseTensor& TypeProto_SparseTensor::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TypeProto_SparseTensor> TypeProto_SparseTensor_default_instance_;

TypeProto_SparseTensor* TypeProto_SparseTensor::New(::google::protobuf::Arena* arena) const {
  TypeProto_SparseTensor* n = new TypeProto_SparseTensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypeProto_SparseTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.SparseTensor)
  elem_type_ = 0;
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}

bool TypeProto_SparseTensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TypeProto.SparseTensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 elem_type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elem_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shape;
        break;
      }

      // optional .onnx.TensorShapeProto shape = 2;
      case 2: {
        if (tag == 18) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TypeProto.SparseTensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TypeProto.SparseTensor)
  return false;
#undef DO_
}

void TypeProto_SparseTensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TypeProto.SparseTensor)
  // optional int32 elem_type = 1;
  if (this->elem_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->elem_type(), output);
  }

  // optional .onnx.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->shape_, output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TypeProto.SparseTensor)
}

size_t TypeProto_SparseTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.SparseTensor)
  size_t total_size = 0;

  // optional int32 elem_type = 1;
  if (this->elem_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->elem_type());
  }

  // optional .onnx.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeProto_SparseTensor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TypeProto_SparseTensor*>(&from));
}

void TypeProto_SparseTensor::MergeFrom(const TypeProto_SparseTensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.SparseTensor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TypeProto_SparseTensor::UnsafeMergeFrom(const TypeProto_SparseTensor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.elem_type() != 0) {
    set_elem_type(from.elem_type());
  }
  if (from.has_shape()) {
    mutable_shape()->::onnx::TensorShapeProto::MergeFrom(from.shape());
  }
}

void TypeProto_SparseTensor::CopyFrom(const TypeProto_SparseTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.SparseTensor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TypeProto_SparseTensor::IsInitialized() const {

  return true;
}

void TypeProto_SparseTensor::Swap(TypeProto_SparseTensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeProto_SparseTensor::InternalSwap(TypeProto_SparseTensor* other) {
  std::swap(elem_type_, other->elem_type_);
  std::swap(shape_, other->shape_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TypeProto_SparseTensor::GetTypeName() const {
  return "onnx.TypeProto.SparseTensor";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeProto::kTensorTypeFieldNumber;
const int TypeProto::kSequenceTypeFieldNumber;
const int TypeProto::kMapTypeFieldNumber;
const int TypeProto::kOptionalTypeFieldNumber;
const int TypeProto::kSparseTensorTypeFieldNumber;
const int TypeProto::kDenotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeProto::TypeProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.TypeProto)
}

void TypeProto::InitAsDefaultInstance() {
}

TypeProto::TypeProto(const TypeProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto)
}

void TypeProto::SharedCtor() {
  denotation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
  _cached_size_ = 0;
}

TypeProto::~TypeProto() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto)
  SharedDtor();
}

void TypeProto::SharedDtor() {
  denotation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void TypeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TypeProto& TypeProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TypeProto> TypeProto_default_instance_;

TypeProto* TypeProto::New(::google::protobuf::Arena* arena) const {
  TypeProto* n = new TypeProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypeProto::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:onnx.TypeProto)
  switch (value_case()) {
    case kTensorType: {
      delete value_.tensor_type_;
      break;
    }
    case kSequenceType: {
      delete value_.sequence_type_;
      break;
    }
    case kMapType: {
      delete value_.map_type_;
      break;
    }
    case kOptionalType: {
      delete value_.optional_type_;
      break;
    }
    case kSparseTensorType: {
      delete value_.sparse_tensor_type_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void TypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto)
  denotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_value();
}

bool TypeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.TypeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .onnx.TypeProto.Tensor tensor_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_type()));
        } else {
          goto handle_unusual;
        }
        goto after_map_type;
        break;
      }

      // optional .onnx.TypeProto.Sequence sequence_type = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sequence_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_map_type;
        break;
      }

      // optional .onnx.TypeProto.Map map_type = 5;
      case 5: {
        if (tag == 42) {
         parse_map_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_type()));
        } else {
          goto handle_unusual;
        }
       after_map_type:
        if (input->ExpectTag(50)) goto parse_denotation;
        break;
      }

      // optional string denotation = 6;
      case 6: {
        if (tag == 50) {
         parse_denotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_denotation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->denotation().data(), this->denotation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.TypeProto.denotation"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sparse_tensor_type;
        break;
      }

      // optional .onnx.TypeProto.SparseTensor sparse_tensor_type = 8;
      case 8: {
        if (tag == 66) {
         parse_sparse_tensor_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sparse_tensor_type()));
        } else {
          goto handle_unusual;
        }
        goto after_optional_type;
        break;
      }

      // optional .onnx.TypeProto.Optional optional_type = 9;
      case 9: {
        if (tag == 74) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_type()));
        } else {
          goto handle_unusual;
        }
       after_optional_type:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.TypeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.TypeProto)
  return false;
#undef DO_
}

void TypeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.TypeProto)
  // optional .onnx.TypeProto.Tensor tensor_type = 1;
  if (has_tensor_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *value_.tensor_type_, output);
  }

  // optional .onnx.TypeProto.Sequence sequence_type = 4;
  if (has_sequence_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *value_.sequence_type_, output);
  }

  // optional .onnx.TypeProto.Map map_type = 5;
  if (has_map_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *value_.map_type_, output);
  }

  // optional string denotation = 6;
  if (this->denotation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->denotation().data(), this->denotation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.TypeProto.denotation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->denotation(), output);
  }

  // optional .onnx.TypeProto.SparseTensor sparse_tensor_type = 8;
  if (has_sparse_tensor_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *value_.sparse_tensor_type_, output);
  }

  // optional .onnx.TypeProto.Optional optional_type = 9;
  if (has_optional_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *value_.optional_type_, output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.TypeProto)
}

size_t TypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto)
  size_t total_size = 0;

  // optional string denotation = 6;
  if (this->denotation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->denotation());
  }

  switch (value_case()) {
    // optional .onnx.TypeProto.Tensor tensor_type = 1;
    case kTensorType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.tensor_type_);
      break;
    }
    // optional .onnx.TypeProto.Sequence sequence_type = 4;
    case kSequenceType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.sequence_type_);
      break;
    }
    // optional .onnx.TypeProto.Map map_type = 5;
    case kMapType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.map_type_);
      break;
    }
    // optional .onnx.TypeProto.Optional optional_type = 9;
    case kOptionalType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.optional_type_);
      break;
    }
    // optional .onnx.TypeProto.SparseTensor sparse_tensor_type = 8;
    case kSparseTensorType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.sparse_tensor_type_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TypeProto*>(&from));
}

void TypeProto::MergeFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TypeProto::UnsafeMergeFrom(const TypeProto& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.value_case()) {
    case kTensorType: {
      mutable_tensor_type()->::onnx::TypeProto_Tensor::MergeFrom(from.tensor_type());
      break;
    }
    case kSequenceType: {
      mutable_sequence_type()->::onnx::TypeProto_Sequence::MergeFrom(from.sequence_type());
      break;
    }
    case kMapType: {
      mutable_map_type()->::onnx::TypeProto_Map::MergeFrom(from.map_type());
      break;
    }
    case kOptionalType: {
      mutable_optional_type()->::onnx::TypeProto_Optional::MergeFrom(from.optional_type());
      break;
    }
    case kSparseTensorType: {
      mutable_sparse_tensor_type()->::onnx::TypeProto_SparseTensor::MergeFrom(from.sparse_tensor_type());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from.denotation().size() > 0) {

    denotation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denotation_);
  }
}

void TypeProto::CopyFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TypeProto::IsInitialized() const {

  return true;
}

void TypeProto::Swap(TypeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeProto::InternalSwap(TypeProto* other) {
  denotation_.Swap(&other->denotation_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TypeProto::GetTypeName() const {
  return "onnx.TypeProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TypeProto_Tensor

// optional int32 elem_type = 1;
void TypeProto_Tensor::clear_elem_type() {
  elem_type_ = 0;
}
::google::protobuf::int32 TypeProto_Tensor::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Tensor.elem_type)
  return elem_type_;
}
void TypeProto_Tensor::set_elem_type(::google::protobuf::int32 value) {
  
  elem_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TypeProto.Tensor.elem_type)
}

// optional .onnx.TensorShapeProto shape = 2;
bool TypeProto_Tensor::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void TypeProto_Tensor::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::onnx::TensorShapeProto& TypeProto_Tensor::shape() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Tensor.shape)
  return shape_ != NULL ? *shape_
                         : *::onnx::TensorShapeProto::internal_default_instance();
}
::onnx::TensorShapeProto* TypeProto_Tensor::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::onnx::TensorShapeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.Tensor.shape)
  return shape_;
}
::onnx::TensorShapeProto* TypeProto_Tensor::release_shape() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.Tensor.shape)
  
  ::onnx::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
void TypeProto_Tensor::set_allocated_shape(::onnx::TensorShapeProto* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.Tensor.shape)
}

inline const TypeProto_Tensor* TypeProto_Tensor::internal_default_instance() {
  return &TypeProto_Tensor_default_instance_.get();
}
// -------------------------------------------------------------------

// TypeProto_Sequence

// optional .onnx.TypeProto elem_type = 1;
bool TypeProto_Sequence::has_elem_type() const {
  return this != internal_default_instance() && elem_type_ != NULL;
}
void TypeProto_Sequence::clear_elem_type() {
  if (GetArenaNoVirtual() == NULL && elem_type_ != NULL) delete elem_type_;
  elem_type_ = NULL;
}
const ::onnx::TypeProto& TypeProto_Sequence::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Sequence.elem_type)
  return elem_type_ != NULL ? *elem_type_
                         : *::onnx::TypeProto::internal_default_instance();
}
::onnx::TypeProto* TypeProto_Sequence::mutable_elem_type() {
  
  if (elem_type_ == NULL) {
    elem_type_ = new ::onnx::TypeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.Sequence.elem_type)
  return elem_type_;
}
::onnx::TypeProto* TypeProto_Sequence::release_elem_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.Sequence.elem_type)
  
  ::onnx::TypeProto* temp = elem_type_;
  elem_type_ = NULL;
  return temp;
}
void TypeProto_Sequence::set_allocated_elem_type(::onnx::TypeProto* elem_type) {
  delete elem_type_;
  elem_type_ = elem_type;
  if (elem_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.Sequence.elem_type)
}

inline const TypeProto_Sequence* TypeProto_Sequence::internal_default_instance() {
  return &TypeProto_Sequence_default_instance_.get();
}
// -------------------------------------------------------------------

// TypeProto_Map

// optional int32 key_type = 1;
void TypeProto_Map::clear_key_type() {
  key_type_ = 0;
}
::google::protobuf::int32 TypeProto_Map::key_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Map.key_type)
  return key_type_;
}
void TypeProto_Map::set_key_type(::google::protobuf::int32 value) {
  
  key_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TypeProto.Map.key_type)
}

// optional .onnx.TypeProto value_type = 2;
bool TypeProto_Map::has_value_type() const {
  return this != internal_default_instance() && value_type_ != NULL;
}
void TypeProto_Map::clear_value_type() {
  if (GetArenaNoVirtual() == NULL && value_type_ != NULL) delete value_type_;
  value_type_ = NULL;
}
const ::onnx::TypeProto& TypeProto_Map::value_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Map.value_type)
  return value_type_ != NULL ? *value_type_
                         : *::onnx::TypeProto::internal_default_instance();
}
::onnx::TypeProto* TypeProto_Map::mutable_value_type() {
  
  if (value_type_ == NULL) {
    value_type_ = new ::onnx::TypeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.Map.value_type)
  return value_type_;
}
::onnx::TypeProto* TypeProto_Map::release_value_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.Map.value_type)
  
  ::onnx::TypeProto* temp = value_type_;
  value_type_ = NULL;
  return temp;
}
void TypeProto_Map::set_allocated_value_type(::onnx::TypeProto* value_type) {
  delete value_type_;
  value_type_ = value_type;
  if (value_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.Map.value_type)
}

inline const TypeProto_Map* TypeProto_Map::internal_default_instance() {
  return &TypeProto_Map_default_instance_.get();
}
// -------------------------------------------------------------------

// TypeProto_Optional

// optional .onnx.TypeProto elem_type = 1;
bool TypeProto_Optional::has_elem_type() const {
  return this != internal_default_instance() && elem_type_ != NULL;
}
void TypeProto_Optional::clear_elem_type() {
  if (GetArenaNoVirtual() == NULL && elem_type_ != NULL) delete elem_type_;
  elem_type_ = NULL;
}
const ::onnx::TypeProto& TypeProto_Optional::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Optional.elem_type)
  return elem_type_ != NULL ? *elem_type_
                         : *::onnx::TypeProto::internal_default_instance();
}
::onnx::TypeProto* TypeProto_Optional::mutable_elem_type() {
  
  if (elem_type_ == NULL) {
    elem_type_ = new ::onnx::TypeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.Optional.elem_type)
  return elem_type_;
}
::onnx::TypeProto* TypeProto_Optional::release_elem_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.Optional.elem_type)
  
  ::onnx::TypeProto* temp = elem_type_;
  elem_type_ = NULL;
  return temp;
}
void TypeProto_Optional::set_allocated_elem_type(::onnx::TypeProto* elem_type) {
  delete elem_type_;
  elem_type_ = elem_type;
  if (elem_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.Optional.elem_type)
}

inline const TypeProto_Optional* TypeProto_Optional::internal_default_instance() {
  return &TypeProto_Optional_default_instance_.get();
}
// -------------------------------------------------------------------

// TypeProto_SparseTensor

// optional int32 elem_type = 1;
void TypeProto_SparseTensor::clear_elem_type() {
  elem_type_ = 0;
}
::google::protobuf::int32 TypeProto_SparseTensor::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.SparseTensor.elem_type)
  return elem_type_;
}
void TypeProto_SparseTensor::set_elem_type(::google::protobuf::int32 value) {
  
  elem_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TypeProto.SparseTensor.elem_type)
}

// optional .onnx.TensorShapeProto shape = 2;
bool TypeProto_SparseTensor::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void TypeProto_SparseTensor::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::onnx::TensorShapeProto& TypeProto_SparseTensor::shape() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.SparseTensor.shape)
  return shape_ != NULL ? *shape_
                         : *::onnx::TensorShapeProto::internal_default_instance();
}
::onnx::TensorShapeProto* TypeProto_SparseTensor::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::onnx::TensorShapeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.SparseTensor.shape)
  return shape_;
}
::onnx::TensorShapeProto* TypeProto_SparseTensor::release_shape() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.SparseTensor.shape)
  
  ::onnx::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
void TypeProto_SparseTensor::set_allocated_shape(::onnx::TensorShapeProto* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.SparseTensor.shape)
}

inline const TypeProto_SparseTensor* TypeProto_SparseTensor::internal_default_instance() {
  return &TypeProto_SparseTensor_default_instance_.get();
}
// -------------------------------------------------------------------

// TypeProto

// optional .onnx.TypeProto.Tensor tensor_type = 1;
bool TypeProto::has_tensor_type() const {
  return value_case() == kTensorType;
}
void TypeProto::set_has_tensor_type() {
  _oneof_case_[0] = kTensorType;
}
void TypeProto::clear_tensor_type() {
  if (has_tensor_type()) {
    delete value_.tensor_type_;
    clear_has_value();
  }
}
 const ::onnx::TypeProto_Tensor& TypeProto::tensor_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.tensor_type)
  return has_tensor_type()
      ? *value_.tensor_type_
      : ::onnx::TypeProto_Tensor::default_instance();
}
::onnx::TypeProto_Tensor* TypeProto::mutable_tensor_type() {
  if (!has_tensor_type()) {
    clear_value();
    set_has_tensor_type();
    value_.tensor_type_ = new ::onnx::TypeProto_Tensor;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.tensor_type)
  return value_.tensor_type_;
}
::onnx::TypeProto_Tensor* TypeProto::release_tensor_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.tensor_type)
  if (has_tensor_type()) {
    clear_has_value();
    ::onnx::TypeProto_Tensor* temp = value_.tensor_type_;
    value_.tensor_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TypeProto::set_allocated_tensor_type(::onnx::TypeProto_Tensor* tensor_type) {
  clear_value();
  if (tensor_type) {
    set_has_tensor_type();
    value_.tensor_type_ = tensor_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.tensor_type)
}

// optional .onnx.TypeProto.Sequence sequence_type = 4;
bool TypeProto::has_sequence_type() const {
  return value_case() == kSequenceType;
}
void TypeProto::set_has_sequence_type() {
  _oneof_case_[0] = kSequenceType;
}
void TypeProto::clear_sequence_type() {
  if (has_sequence_type()) {
    delete value_.sequence_type_;
    clear_has_value();
  }
}
 const ::onnx::TypeProto_Sequence& TypeProto::sequence_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.sequence_type)
  return has_sequence_type()
      ? *value_.sequence_type_
      : ::onnx::TypeProto_Sequence::default_instance();
}
::onnx::TypeProto_Sequence* TypeProto::mutable_sequence_type() {
  if (!has_sequence_type()) {
    clear_value();
    set_has_sequence_type();
    value_.sequence_type_ = new ::onnx::TypeProto_Sequence;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.sequence_type)
  return value_.sequence_type_;
}
::onnx::TypeProto_Sequence* TypeProto::release_sequence_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.sequence_type)
  if (has_sequence_type()) {
    clear_has_value();
    ::onnx::TypeProto_Sequence* temp = value_.sequence_type_;
    value_.sequence_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TypeProto::set_allocated_sequence_type(::onnx::TypeProto_Sequence* sequence_type) {
  clear_value();
  if (sequence_type) {
    set_has_sequence_type();
    value_.sequence_type_ = sequence_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.sequence_type)
}

// optional .onnx.TypeProto.Map map_type = 5;
bool TypeProto::has_map_type() const {
  return value_case() == kMapType;
}
void TypeProto::set_has_map_type() {
  _oneof_case_[0] = kMapType;
}
void TypeProto::clear_map_type() {
  if (has_map_type()) {
    delete value_.map_type_;
    clear_has_value();
  }
}
 const ::onnx::TypeProto_Map& TypeProto::map_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.map_type)
  return has_map_type()
      ? *value_.map_type_
      : ::onnx::TypeProto_Map::default_instance();
}
::onnx::TypeProto_Map* TypeProto::mutable_map_type() {
  if (!has_map_type()) {
    clear_value();
    set_has_map_type();
    value_.map_type_ = new ::onnx::TypeProto_Map;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.map_type)
  return value_.map_type_;
}
::onnx::TypeProto_Map* TypeProto::release_map_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.map_type)
  if (has_map_type()) {
    clear_has_value();
    ::onnx::TypeProto_Map* temp = value_.map_type_;
    value_.map_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TypeProto::set_allocated_map_type(::onnx::TypeProto_Map* map_type) {
  clear_value();
  if (map_type) {
    set_has_map_type();
    value_.map_type_ = map_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.map_type)
}

// optional .onnx.TypeProto.Optional optional_type = 9;
bool TypeProto::has_optional_type() const {
  return value_case() == kOptionalType;
}
void TypeProto::set_has_optional_type() {
  _oneof_case_[0] = kOptionalType;
}
void TypeProto::clear_optional_type() {
  if (has_optional_type()) {
    delete value_.optional_type_;
    clear_has_value();
  }
}
 const ::onnx::TypeProto_Optional& TypeProto::optional_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.optional_type)
  return has_optional_type()
      ? *value_.optional_type_
      : ::onnx::TypeProto_Optional::default_instance();
}
::onnx::TypeProto_Optional* TypeProto::mutable_optional_type() {
  if (!has_optional_type()) {
    clear_value();
    set_has_optional_type();
    value_.optional_type_ = new ::onnx::TypeProto_Optional;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.optional_type)
  return value_.optional_type_;
}
::onnx::TypeProto_Optional* TypeProto::release_optional_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.optional_type)
  if (has_optional_type()) {
    clear_has_value();
    ::onnx::TypeProto_Optional* temp = value_.optional_type_;
    value_.optional_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TypeProto::set_allocated_optional_type(::onnx::TypeProto_Optional* optional_type) {
  clear_value();
  if (optional_type) {
    set_has_optional_type();
    value_.optional_type_ = optional_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.optional_type)
}

// optional .onnx.TypeProto.SparseTensor sparse_tensor_type = 8;
bool TypeProto::has_sparse_tensor_type() const {
  return value_case() == kSparseTensorType;
}
void TypeProto::set_has_sparse_tensor_type() {
  _oneof_case_[0] = kSparseTensorType;
}
void TypeProto::clear_sparse_tensor_type() {
  if (has_sparse_tensor_type()) {
    delete value_.sparse_tensor_type_;
    clear_has_value();
  }
}
 const ::onnx::TypeProto_SparseTensor& TypeProto::sparse_tensor_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.sparse_tensor_type)
  return has_sparse_tensor_type()
      ? *value_.sparse_tensor_type_
      : ::onnx::TypeProto_SparseTensor::default_instance();
}
::onnx::TypeProto_SparseTensor* TypeProto::mutable_sparse_tensor_type() {
  if (!has_sparse_tensor_type()) {
    clear_value();
    set_has_sparse_tensor_type();
    value_.sparse_tensor_type_ = new ::onnx::TypeProto_SparseTensor;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.sparse_tensor_type)
  return value_.sparse_tensor_type_;
}
::onnx::TypeProto_SparseTensor* TypeProto::release_sparse_tensor_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.sparse_tensor_type)
  if (has_sparse_tensor_type()) {
    clear_has_value();
    ::onnx::TypeProto_SparseTensor* temp = value_.sparse_tensor_type_;
    value_.sparse_tensor_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TypeProto::set_allocated_sparse_tensor_type(::onnx::TypeProto_SparseTensor* sparse_tensor_type) {
  clear_value();
  if (sparse_tensor_type) {
    set_has_sparse_tensor_type();
    value_.sparse_tensor_type_ = sparse_tensor_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.sparse_tensor_type)
}

// optional string denotation = 6;
void TypeProto::clear_denotation() {
  denotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TypeProto::denotation() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.denotation)
  return denotation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TypeProto::set_denotation(const ::std::string& value) {
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TypeProto.denotation)
}
void TypeProto::set_denotation(const char* value) {
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TypeProto.denotation)
}
void TypeProto::set_denotation(const char* value, size_t size) {
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TypeProto.denotation)
}
::std::string* TypeProto::mutable_denotation() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.denotation)
  return denotation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TypeProto::release_denotation() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.denotation)
  
  return denotation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TypeProto::set_allocated_denotation(::std::string* denotation) {
  if (denotation != NULL) {
    
  } else {
    
  }
  denotation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), denotation);
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.denotation)
}

bool TypeProto::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void TypeProto::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
TypeProto::ValueCase TypeProto::value_case() const {
  return TypeProto::ValueCase(_oneof_case_[0]);
}
inline const TypeProto* TypeProto::internal_default_instance() {
  return &TypeProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperatorSetIdProto::kDomainFieldNumber;
const int OperatorSetIdProto::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperatorSetIdProto::OperatorSetIdProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.OperatorSetIdProto)
}

void OperatorSetIdProto::InitAsDefaultInstance() {
}

OperatorSetIdProto::OperatorSetIdProto(const OperatorSetIdProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.OperatorSetIdProto)
}

void OperatorSetIdProto::SharedCtor() {
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

OperatorSetIdProto::~OperatorSetIdProto() {
  // @@protoc_insertion_point(destructor:onnx.OperatorSetIdProto)
  SharedDtor();
}

void OperatorSetIdProto::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OperatorSetIdProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OperatorSetIdProto& OperatorSetIdProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OperatorSetIdProto> OperatorSetIdProto_default_instance_;

OperatorSetIdProto* OperatorSetIdProto::New(::google::protobuf::Arena* arena) const {
  OperatorSetIdProto* n = new OperatorSetIdProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperatorSetIdProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.OperatorSetIdProto)
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_LONGLONG(0);
}

bool OperatorSetIdProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.OperatorSetIdProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.OperatorSetIdProto.domain"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.OperatorSetIdProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.OperatorSetIdProto)
  return false;
#undef DO_
}

void OperatorSetIdProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.OperatorSetIdProto)
  // optional string domain = 1;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.OperatorSetIdProto.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // optional int64 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.OperatorSetIdProto)
}

size_t OperatorSetIdProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.OperatorSetIdProto)
  size_t total_size = 0;

  // optional string domain = 1;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // optional int64 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperatorSetIdProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OperatorSetIdProto*>(&from));
}

void OperatorSetIdProto::MergeFrom(const OperatorSetIdProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.OperatorSetIdProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OperatorSetIdProto::UnsafeMergeFrom(const OperatorSetIdProto& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void OperatorSetIdProto::CopyFrom(const OperatorSetIdProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.OperatorSetIdProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OperatorSetIdProto::IsInitialized() const {

  return true;
}

void OperatorSetIdProto::Swap(OperatorSetIdProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperatorSetIdProto::InternalSwap(OperatorSetIdProto* other) {
  domain_.Swap(&other->domain_);
  std::swap(version_, other->version_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OperatorSetIdProto::GetTypeName() const {
  return "onnx.OperatorSetIdProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperatorSetIdProto

// optional string domain = 1;
void OperatorSetIdProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OperatorSetIdProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.OperatorSetIdProto.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperatorSetIdProto::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.OperatorSetIdProto.domain)
}
void OperatorSetIdProto::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.OperatorSetIdProto.domain)
}
void OperatorSetIdProto::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.OperatorSetIdProto.domain)
}
::std::string* OperatorSetIdProto::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:onnx.OperatorSetIdProto.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperatorSetIdProto::release_domain() {
  // @@protoc_insertion_point(field_release:onnx.OperatorSetIdProto.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperatorSetIdProto::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:onnx.OperatorSetIdProto.domain)
}

// optional int64 version = 2;
void OperatorSetIdProto::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OperatorSetIdProto::version() const {
  // @@protoc_insertion_point(field_get:onnx.OperatorSetIdProto.version)
  return version_;
}
void OperatorSetIdProto::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:onnx.OperatorSetIdProto.version)
}

inline const OperatorSetIdProto* OperatorSetIdProto::internal_default_instance() {
  return &OperatorSetIdProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FunctionProto::kNameFieldNumber;
const int FunctionProto::kInputFieldNumber;
const int FunctionProto::kOutputFieldNumber;
const int FunctionProto::kAttributeFieldNumber;
const int FunctionProto::kNodeFieldNumber;
const int FunctionProto::kDocStringFieldNumber;
const int FunctionProto::kOpsetImportFieldNumber;
const int FunctionProto::kDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FunctionProto::FunctionProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_onnx_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx.FunctionProto)
}

void FunctionProto::InitAsDefaultInstance() {
}

FunctionProto::FunctionProto(const FunctionProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onnx.FunctionProto)
}

void FunctionProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FunctionProto::~FunctionProto() {
  // @@protoc_insertion_point(destructor:onnx.FunctionProto)
  SharedDtor();
}

void FunctionProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FunctionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FunctionProto& FunctionProto::default_instance() {
  protobuf_InitDefaults_onnx_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FunctionProto> FunctionProto_default_instance_;

FunctionProto* FunctionProto::New(::google::protobuf::Arena* arena) const {
  FunctionProto* n = new FunctionProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FunctionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.FunctionProto)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_.Clear();
  output_.Clear();
  attribute_.Clear();
  node_.Clear();
  opset_import_.Clear();
}

bool FunctionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx.FunctionProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.FunctionProto.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_input;
        break;
      }

      // repeated string input = 4;
      case 4: {
        if (tag == 34) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.FunctionProto.input"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_input;
        if (input->ExpectTag(42)) goto parse_output;
        break;
      }

      // repeated string output = 5;
      case 5: {
        if (tag == 42) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output(this->output_size() - 1).data(),
            this->output(this->output_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.FunctionProto.output"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_output;
        if (input->ExpectTag(50)) goto parse_attribute;
        break;
      }

      // repeated string attribute = 6;
      case 6: {
        if (tag == 50) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attribute()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->attribute(this->attribute_size() - 1).data(),
            this->attribute(this->attribute_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.FunctionProto.attribute"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attribute;
        if (input->ExpectTag(58)) goto parse_node;
        break;
      }

      // repeated .onnx.NodeProto node = 7;
      case 7: {
        if (tag == 58) {
         parse_node:
          DO_(input->IncrementRecursionDepth());
         parse_loop_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_node;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_doc_string;
        break;
      }

      // optional string doc_string = 8;
      case 8: {
        if (tag == 66) {
         parse_doc_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->doc_string().data(), this->doc_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.FunctionProto.doc_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_opset_import;
        break;
      }

      // repeated .onnx.OperatorSetIdProto opset_import = 9;
      case 9: {
        if (tag == 74) {
         parse_opset_import:
          DO_(input->IncrementRecursionDepth());
         parse_loop_opset_import:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_opset_import()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_opset_import;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_domain;
        break;
      }

      // optional string domain = 10;
      case 10: {
        if (tag == 82) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onnx.FunctionProto.domain"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx.FunctionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx.FunctionProto)
  return false;
#undef DO_
}

void FunctionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx.FunctionProto)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.FunctionProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string input = 4;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.FunctionProto.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->input(i), output);
  }

  // repeated string output = 5;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output(i).data(), this->output(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.FunctionProto.output");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->output(i), output);
  }

  // repeated string attribute = 6;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->attribute(i).data(), this->attribute(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.FunctionProto.attribute");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->attribute(i), output);
  }

  // repeated .onnx.NodeProto node = 7;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->node(i), output);
  }

  // optional string doc_string = 8;
  if (this->doc_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->doc_string().data(), this->doc_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.FunctionProto.doc_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->doc_string(), output);
  }

  // repeated .onnx.OperatorSetIdProto opset_import = 9;
  for (unsigned int i = 0, n = this->opset_import_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->opset_import(i), output);
  }

  // optional string domain = 10;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onnx.FunctionProto.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->domain(), output);
  }

  // @@protoc_insertion_point(serialize_end:onnx.FunctionProto)
}

size_t FunctionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.FunctionProto)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string doc_string = 8;
  if (this->doc_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_string());
  }

  // optional string domain = 10;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // repeated string input = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_size());
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated string output = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_size());
  for (int i = 0; i < this->output_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->output(i));
  }

  // repeated string attribute = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attribute_size());
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attribute(i));
  }

  // repeated .onnx.NodeProto node = 7;
  {
    unsigned int count = this->node_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node(i));
    }
  }

  // repeated .onnx.OperatorSetIdProto opset_import = 9;
  {
    unsigned int count = this->opset_import_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opset_import(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FunctionProto*>(&from));
}

void FunctionProto::MergeFrom(const FunctionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.FunctionProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FunctionProto::UnsafeMergeFrom(const FunctionProto& from) {
  GOOGLE_DCHECK(&from != this);
  input_.UnsafeMergeFrom(from.input_);
  output_.UnsafeMergeFrom(from.output_);
  attribute_.UnsafeMergeFrom(from.attribute_);
  node_.MergeFrom(from.node_);
  opset_import_.MergeFrom(from.opset_import_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.doc_string().size() > 0) {

    doc_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_string_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
}

void FunctionProto::CopyFrom(const FunctionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.FunctionProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FunctionProto::IsInitialized() const {

  return true;
}

void FunctionProto::Swap(FunctionProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FunctionProto::InternalSwap(FunctionProto* other) {
  name_.Swap(&other->name_);
  input_.UnsafeArenaSwap(&other->input_);
  output_.UnsafeArenaSwap(&other->output_);
  attribute_.UnsafeArenaSwap(&other->attribute_);
  node_.UnsafeArenaSwap(&other->node_);
  doc_string_.Swap(&other->doc_string_);
  opset_import_.UnsafeArenaSwap(&other->opset_import_);
  domain_.Swap(&other->domain_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FunctionProto::GetTypeName() const {
  return "onnx.FunctionProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FunctionProto

// optional string name = 1;
void FunctionProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FunctionProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FunctionProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.name)
}
void FunctionProto::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.name)
}
void FunctionProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.name)
}
::std::string* FunctionProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FunctionProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.FunctionProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FunctionProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.FunctionProto.name)
}

// repeated string input = 4;
int FunctionProto::input_size() const {
  return input_.size();
}
void FunctionProto::clear_input() {
  input_.Clear();
}
const ::std::string& FunctionProto::input(int index) const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.input)
  return input_.Get(index);
}
::std::string* FunctionProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.input)
  return input_.Mutable(index);
}
void FunctionProto::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.input)
  input_.Mutable(index)->assign(value);
}
void FunctionProto::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.input)
}
void FunctionProto::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.input)
}
::std::string* FunctionProto::add_input() {
  // @@protoc_insertion_point(field_add_mutable:onnx.FunctionProto.input)
  return input_.Add();
}
void FunctionProto::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.input)
}
void FunctionProto::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.FunctionProto.input)
}
void FunctionProto::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.FunctionProto.input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FunctionProto::input() const {
  // @@protoc_insertion_point(field_list:onnx.FunctionProto.input)
  return input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FunctionProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:onnx.FunctionProto.input)
  return &input_;
}

// repeated string output = 5;
int FunctionProto::output_size() const {
  return output_.size();
}
void FunctionProto::clear_output() {
  output_.Clear();
}
const ::std::string& FunctionProto::output(int index) const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.output)
  return output_.Get(index);
}
::std::string* FunctionProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.output)
  return output_.Mutable(index);
}
void FunctionProto::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.output)
  output_.Mutable(index)->assign(value);
}
void FunctionProto::set_output(int index, const char* value) {
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.output)
}
void FunctionProto::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.output)
}
::std::string* FunctionProto::add_output() {
  // @@protoc_insertion_point(field_add_mutable:onnx.FunctionProto.output)
  return output_.Add();
}
void FunctionProto::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.output)
}
void FunctionProto::add_output(const char* value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.FunctionProto.output)
}
void FunctionProto::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.FunctionProto.output)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FunctionProto::output() const {
  // @@protoc_insertion_point(field_list:onnx.FunctionProto.output)
  return output_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FunctionProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:onnx.FunctionProto.output)
  return &output_;
}

// repeated string attribute = 6;
int FunctionProto::attribute_size() const {
  return attribute_.size();
}
void FunctionProto::clear_attribute() {
  attribute_.Clear();
}
const ::std::string& FunctionProto::attribute(int index) const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.attribute)
  return attribute_.Get(index);
}
::std::string* FunctionProto::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.attribute)
  return attribute_.Mutable(index);
}
void FunctionProto::set_attribute(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.attribute)
  attribute_.Mutable(index)->assign(value);
}
void FunctionProto::set_attribute(int index, const char* value) {
  attribute_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.attribute)
}
void FunctionProto::set_attribute(int index, const char* value, size_t size) {
  attribute_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.attribute)
}
::std::string* FunctionProto::add_attribute() {
  // @@protoc_insertion_point(field_add_mutable:onnx.FunctionProto.attribute)
  return attribute_.Add();
}
void FunctionProto::add_attribute(const ::std::string& value) {
  attribute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.attribute)
}
void FunctionProto::add_attribute(const char* value) {
  attribute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.FunctionProto.attribute)
}
void FunctionProto::add_attribute(const char* value, size_t size) {
  attribute_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.FunctionProto.attribute)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FunctionProto::attribute() const {
  // @@protoc_insertion_point(field_list:onnx.FunctionProto.attribute)
  return attribute_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FunctionProto::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:onnx.FunctionProto.attribute)
  return &attribute_;
}

// repeated .onnx.NodeProto node = 7;
int FunctionProto::node_size() const {
  return node_.size();
}
void FunctionProto::clear_node() {
  node_.Clear();
}
const ::onnx::NodeProto& FunctionProto::node(int index) const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.node)
  return node_.Get(index);
}
::onnx::NodeProto* FunctionProto::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.node)
  return node_.Mutable(index);
}
::onnx::NodeProto* FunctionProto::add_node() {
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >*
FunctionProto::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:onnx.FunctionProto.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >&
FunctionProto::node() const {
  // @@protoc_insertion_point(field_list:onnx.FunctionProto.node)
  return node_;
}

// optional string doc_string = 8;
void FunctionProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FunctionProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.doc_string)
  return doc_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FunctionProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.doc_string)
}
void FunctionProto::set_doc_string(const char* value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.doc_string)
}
void FunctionProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.doc_string)
}
::std::string* FunctionProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FunctionProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.FunctionProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FunctionProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.FunctionProto.doc_string)
}

// repeated .onnx.OperatorSetIdProto opset_import = 9;
int FunctionProto::opset_import_size() const {
  return opset_import_.size();
}
void FunctionProto::clear_opset_import() {
  opset_import_.Clear();
}
const ::onnx::OperatorSetIdProto& FunctionProto::opset_import(int index) const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.opset_import)
  return opset_import_.Get(index);
}
::onnx::OperatorSetIdProto* FunctionProto::mutable_opset_import(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.opset_import)
  return opset_import_.Mutable(index);
}
::onnx::OperatorSetIdProto* FunctionProto::add_opset_import() {
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.opset_import)
  return opset_import_.Add();
}
::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >*
FunctionProto::mutable_opset_import() {
  // @@protoc_insertion_point(field_mutable_list:onnx.FunctionProto.opset_import)
  return &opset_import_;
}
const ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >&
FunctionProto::opset_import() const {
  // @@protoc_insertion_point(field_list:onnx.FunctionProto.opset_import)
  return opset_import_;
}

// optional string domain = 10;
void FunctionProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FunctionProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FunctionProto::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.domain)
}
void FunctionProto::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.domain)
}
void FunctionProto::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.domain)
}
::std::string* FunctionProto::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FunctionProto::release_domain() {
  // @@protoc_insertion_point(field_release:onnx.FunctionProto.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FunctionProto::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:onnx.FunctionProto.domain)
}

inline const FunctionProto* FunctionProto::internal_default_instance() {
  return &FunctionProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace onnx

// @@protoc_insertion_point(global_scope)
